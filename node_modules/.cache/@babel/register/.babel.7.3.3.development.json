{
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar app = express(); // Create an express application\n\nvar userRoute = require('./routes/user');\n\nvar blogRoute = require('./routes/blog');\n\nvar commentRoute = require('./routes/comment');\n\nvar likeRoute = require('./routes/like');\n\nvar path = require('path');\n\nvar bodyParser = require('body-parser');\n\nvar mongoose = require('mongoose');\n\napp.use(bodyParser.json()); // Now we have access to req.body\n\napp.use(userRoute);\napp.use(blogRoute);\napp.use(commentRoute);\napp.use(likeRoute);\napp.use(express.static('public'));\napp.use(function (req, res, next) {\n  // res.send(`${new Date().toString()} => ${req.originalUrl}`);\n  console.log(\"\".concat(new Date().toString(), \" => \").concat(req.originalUrl, \" \").concat(req.body));\n  next();\n}); // Error Handling\n// 404 - Not found error\n\napp.use(function (req, res, next) {\n  res.status(404).send('We think you are lost.');\n  next();\n}); // 500 - Internal server error\n\napp.use(function (err, req, res, next) {\n  console.log(err.stack);\n  res.sendFile(path.join(__dirname, '../public/500.html'));\n  next();\n});\n\nvar connection = require('./connection.string');\n\napp.set('port', connection.port);\napp.listen(app.get('port'), function (err) {\n  if (err) console.error(err);\n  console.log(\"Server listening on port \".concat(app.get('port'), \"...\"));\n  var db = mongoose.connect(connection.db);\n  mongoose.connection.on('connected', function () {\n    console.log(\"Mongoose connected to \".concat(connection.db));\n  });\n}); // const PORT = process.env.PORT || 3000;\n// app.listen(PORT, () => console.info(`Server has started on ${PORT}`));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiYXBwIiwidXNlclJvdXRlIiwiYmxvZ1JvdXRlIiwiY29tbWVudFJvdXRlIiwibGlrZVJvdXRlIiwicGF0aCIsImJvZHlQYXJzZXIiLCJtb25nb29zZSIsInVzZSIsImpzb24iLCJzdGF0aWMiLCJyZXEiLCJyZXMiLCJuZXh0IiwiY29uc29sZSIsImxvZyIsIkRhdGUiLCJ0b1N0cmluZyIsIm9yaWdpbmFsVXJsIiwiYm9keSIsInN0YXR1cyIsInNlbmQiLCJlcnIiLCJzdGFjayIsInNlbmRGaWxlIiwiam9pbiIsIl9fZGlybmFtZSIsImNvbm5lY3Rpb24iLCJzZXQiLCJwb3J0IiwibGlzdGVuIiwiZ2V0IiwiZXJyb3IiLCJkYiIsImNvbm5lY3QiLCJvbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUVBLElBQUlDLEdBQUcsR0FBR0YsT0FBTyxFQUFqQixDLENBQXFCOztBQUNyQixJQUFJRyxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBQXZCOztBQUNBLElBQUlHLFNBQVMsR0FBR0gsT0FBTyxDQUFDLGVBQUQsQ0FBdkI7O0FBQ0EsSUFBSUksWUFBWSxHQUFHSixPQUFPLENBQUMsa0JBQUQsQ0FBMUI7O0FBQ0EsSUFBSUssU0FBUyxHQUFHTCxPQUFPLENBQUMsZUFBRCxDQUF2Qjs7QUFDQSxJQUFJTSxJQUFJLEdBQUdOLE9BQU8sQ0FBQyxNQUFELENBQWxCOztBQUNBLElBQUlPLFVBQVUsR0FBR1AsT0FBTyxDQUFDLGFBQUQsQ0FBeEI7O0FBQ0EsSUFBSVEsUUFBUSxHQUFHUixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQUMsR0FBRyxDQUFDUSxHQUFKLENBQVFGLFVBQVUsQ0FBQ0csSUFBWCxFQUFSLEUsQ0FBNEI7O0FBQzVCVCxHQUFHLENBQUNRLEdBQUosQ0FBUVAsU0FBUjtBQUNBRCxHQUFHLENBQUNRLEdBQUosQ0FBUU4sU0FBUjtBQUNBRixHQUFHLENBQUNRLEdBQUosQ0FBUUwsWUFBUjtBQUNBSCxHQUFHLENBQUNRLEdBQUosQ0FBUUosU0FBUjtBQUNBSixHQUFHLENBQUNRLEdBQUosQ0FBUVYsT0FBTyxDQUFDWSxNQUFSLENBQWUsUUFBZixDQUFSO0FBQ0FWLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLFVBQUNHLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEVBQW9CO0FBQ3hCO0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixXQUFlLElBQUlDLElBQUosR0FBV0MsUUFBWCxFQUFmLGlCQUEyQ04sR0FBRyxDQUFDTyxXQUEvQyxjQUE4RFAsR0FBRyxDQUFDUSxJQUFsRTtBQUNBTixFQUFBQSxJQUFJO0FBQ1AsQ0FKRCxFLENBUUE7QUFFQTs7QUFDQWIsR0FBRyxDQUFDUSxHQUFKLENBQVEsVUFBQ0csR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDeEJELEVBQUFBLEdBQUcsQ0FBQ1EsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLHdCQUFyQjtBQUNBUixFQUFBQSxJQUFJO0FBQ1AsQ0FIRCxFLENBS0E7O0FBQ0FiLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLFVBQUNjLEdBQUQsRUFBTVgsR0FBTixFQUFXQyxHQUFYLEVBQWdCQyxJQUFoQixFQUF5QjtBQUM3QkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlPLEdBQUcsQ0FBQ0MsS0FBaEI7QUFDQVgsRUFBQUEsR0FBRyxDQUFDWSxRQUFKLENBQWFuQixJQUFJLENBQUNvQixJQUFMLENBQVVDLFNBQVYsRUFBcUIsb0JBQXJCLENBQWI7QUFDQWIsRUFBQUEsSUFBSTtBQUNQLENBSkQ7O0FBT0EsSUFBTWMsVUFBVSxHQUFHNUIsT0FBTyxDQUFDLHFCQUFELENBQTFCOztBQUVBQyxHQUFHLENBQUM0QixHQUFKLENBQVEsTUFBUixFQUFnQkQsVUFBVSxDQUFDRSxJQUEzQjtBQUNBN0IsR0FBRyxDQUFDOEIsTUFBSixDQUFXOUIsR0FBRyxDQUFDK0IsR0FBSixDQUFRLE1BQVIsQ0FBWCxFQUE0QixVQUFBVCxHQUFHLEVBQUk7QUFDakMsTUFBR0EsR0FBSCxFQUFRUixPQUFPLENBQUNrQixLQUFSLENBQWNWLEdBQWQ7QUFDUlIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLG9DQUF3Q2YsR0FBRyxDQUFDK0IsR0FBSixDQUFRLE1BQVIsQ0FBeEM7QUFDQSxNQUFNRSxFQUFFLEdBQUcxQixRQUFRLENBQUMyQixPQUFULENBQWlCUCxVQUFVLENBQUNNLEVBQTVCLENBQVg7QUFDQTFCLEVBQUFBLFFBQVEsQ0FBQ29CLFVBQVQsQ0FBb0JRLEVBQXBCLENBQXVCLFdBQXZCLEVBQW9DLFlBQU07QUFDeENyQixJQUFBQSxPQUFPLENBQUNDLEdBQVIsaUNBQXFDWSxVQUFVLENBQUNNLEVBQWhEO0FBQ0QsR0FGRDtBQUdELENBUEQsRSxDQVNBO0FBQ0EiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuXHJcbmxldCBhcHAgPSBleHByZXNzKCk7IC8vIENyZWF0ZSBhbiBleHByZXNzIGFwcGxpY2F0aW9uXHJcbmxldCB1c2VyUm91dGUgPSByZXF1aXJlKCcuL3JvdXRlcy91c2VyJyk7XHJcbmxldCBibG9nUm91dGUgPSByZXF1aXJlKCcuL3JvdXRlcy9ibG9nJyk7XHJcbmxldCBjb21tZW50Um91dGUgPSByZXF1aXJlKCcuL3JvdXRlcy9jb21tZW50Jyk7XHJcbmxldCBsaWtlUm91dGUgPSByZXF1aXJlKCcuL3JvdXRlcy9saWtlJyk7XHJcbmxldCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5sZXQgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XHJcbmxldCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcblxyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTsgLy8gTm93IHdlIGhhdmUgYWNjZXNzIHRvIHJlcS5ib2R5XHJcbmFwcC51c2UodXNlclJvdXRlKTtcclxuYXBwLnVzZShibG9nUm91dGUpO1xyXG5hcHAudXNlKGNvbW1lbnRSb3V0ZSk7XHJcbmFwcC51c2UobGlrZVJvdXRlKTtcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYygncHVibGljJykpO1xyXG5hcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgLy8gcmVzLnNlbmQoYCR7bmV3IERhdGUoKS50b1N0cmluZygpfSA9PiAke3JlcS5vcmlnaW5hbFVybH1gKTtcclxuICAgIGNvbnNvbGUubG9nKGAke25ldyBEYXRlKCkudG9TdHJpbmcoKX0gPT4gJHtyZXEub3JpZ2luYWxVcmx9ICR7cmVxLmJvZHl9YCk7XHJcbiAgICBuZXh0KCk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG4vLyBFcnJvciBIYW5kbGluZ1xyXG5cclxuLy8gNDA0IC0gTm90IGZvdW5kIGVycm9yXHJcbmFwcC51c2UoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICByZXMuc3RhdHVzKDQwNCkuc2VuZCgnV2UgdGhpbmsgeW91IGFyZSBsb3N0LicpO1xyXG4gICAgbmV4dCgpO1xyXG59KTtcclxuXHJcbi8vIDUwMCAtIEludGVybmFsIHNlcnZlciBlcnJvclxyXG5hcHAudXNlKChlcnIsIHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xyXG4gICAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMvNTAwLmh0bWwnKSk7XHJcbiAgICBuZXh0KCk7XHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IGNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24uc3RyaW5nJyk7XHJcblxyXG5hcHAuc2V0KCdwb3J0JywgY29ubmVjdGlvbi5wb3J0KTtcclxuYXBwLmxpc3RlbihhcHAuZ2V0KCdwb3J0JyksIGVyciA9PiB7XHJcbiAgaWYoZXJyKSBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgY29uc29sZS5sb2coYFNlcnZlciBsaXN0ZW5pbmcgb24gcG9ydCAke2FwcC5nZXQoJ3BvcnQnKX0uLi5gKTtcclxuICBjb25zdCBkYiA9IG1vbmdvb3NlLmNvbm5lY3QoY29ubmVjdGlvbi5kYik7XHJcbiAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbignY29ubmVjdGVkJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYE1vbmdvb3NlIGNvbm5lY3RlZCB0byAke2Nvbm5lY3Rpb24uZGJ9YCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy8gY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxuLy8gYXBwLmxpc3RlbihQT1JULCAoKSA9PiBjb25zb2xlLmluZm8oYFNlcnZlciBoYXMgc3RhcnRlZCBvbiAke1BPUlR9YCkpO1xyXG5cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "app",
        "userRoute",
        "blogRoute",
        "commentRoute",
        "likeRoute",
        "path",
        "bodyParser",
        "mongoose",
        "use",
        "json",
        "static",
        "req",
        "res",
        "next",
        "console",
        "log",
        "Date",
        "toString",
        "originalUrl",
        "body",
        "status",
        "send",
        "err",
        "stack",
        "sendFile",
        "join",
        "__dirname",
        "connection",
        "set",
        "port",
        "listen",
        "get",
        "error",
        "db",
        "connect",
        "on"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAIC,GAAG,GAAGF,OAAO,EAAjB,C,CAAqB;;AACrB,IAAIG,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,kBAAD,CAA1B;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIO,UAAU,GAAGP,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,UAAD,CAAtB;;AAEAC,GAAG,CAACQ,GAAJ,CAAQF,UAAU,CAACG,IAAX,EAAR,E,CAA4B;;AAC5BT,GAAG,CAACQ,GAAJ,CAAQP,SAAR;AACAD,GAAG,CAACQ,GAAJ,CAAQN,SAAR;AACAF,GAAG,CAACQ,GAAJ,CAAQL,YAAR;AACAH,GAAG,CAACQ,GAAJ,CAAQJ,SAAR;AACAJ,GAAG,CAACQ,GAAJ,CAAQV,OAAO,CAACY,MAAR,CAAe,QAAf,CAAR;AACAV,GAAG,CAACQ,GAAJ,CAAQ,UAACG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB;AACAC,EAAAA,OAAO,CAACC,GAAR,WAAe,IAAIC,IAAJ,GAAWC,QAAX,EAAf,iBAA2CN,GAAG,CAACO,WAA/C,cAA8DP,GAAG,CAACQ,IAAlE;AACAN,EAAAA,IAAI;AACP,CAJD,E,CAQA;AAEA;;AACAb,GAAG,CAACQ,GAAJ,CAAQ,UAACG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBD,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACAR,EAAAA,IAAI;AACP,CAHD,E,CAKA;;AACAb,GAAG,CAACQ,GAAJ,CAAQ,UAACc,GAAD,EAAMX,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,KAAhB;AACAX,EAAAA,GAAG,CAACY,QAAJ,CAAanB,IAAI,CAACoB,IAAL,CAAUC,SAAV,EAAqB,oBAArB,CAAb;AACAb,EAAAA,IAAI;AACP,CAJD;;AAOA,IAAMc,UAAU,GAAG5B,OAAO,CAAC,qBAAD,CAA1B;;AAEAC,GAAG,CAAC4B,GAAJ,CAAQ,MAAR,EAAgBD,UAAU,CAACE,IAA3B;AACA7B,GAAG,CAAC8B,MAAJ,CAAW9B,GAAG,CAAC+B,GAAJ,CAAQ,MAAR,CAAX,EAA4B,UAAAT,GAAG,EAAI;AACjC,MAAGA,GAAH,EAAQR,OAAO,CAACkB,KAAR,CAAcV,GAAd;AACRR,EAAAA,OAAO,CAACC,GAAR,oCAAwCf,GAAG,CAAC+B,GAAJ,CAAQ,MAAR,CAAxC;AACA,MAAME,EAAE,GAAG1B,QAAQ,CAAC2B,OAAT,CAAiBP,UAAU,CAACM,EAA5B,CAAX;AACA1B,EAAAA,QAAQ,CAACoB,UAAT,CAAoBQ,EAApB,CAAuB,WAAvB,EAAoC,YAAM;AACxCrB,IAAAA,OAAO,CAACC,GAAR,iCAAqCY,UAAU,CAACM,EAAhD;AACD,GAFD;AAGD,CAPD,E,CASA;AACA",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "sourcesContent": [
        "let express = require('express');\r\n\r\nlet app = express(); // Create an express application\r\nlet userRoute = require('./routes/user');\r\nlet blogRoute = require('./routes/blog');\r\nlet commentRoute = require('./routes/comment');\r\nlet likeRoute = require('./routes/like');\r\nlet path = require('path');\r\nlet bodyParser = require('body-parser');\r\nlet mongoose = require('mongoose');\r\n\r\napp.use(bodyParser.json()); // Now we have access to req.body\r\napp.use(userRoute);\r\napp.use(blogRoute);\r\napp.use(commentRoute);\r\napp.use(likeRoute);\r\napp.use(express.static('public'));\r\napp.use((req, res, next) => {\r\n    // res.send(`${new Date().toString()} => ${req.originalUrl}`);\r\n    console.log(`${new Date().toString()} => ${req.originalUrl} ${req.body}`);\r\n    next();\r\n});\r\n\r\n\r\n\r\n// Error Handling\r\n\r\n// 404 - Not found error\r\napp.use((req, res, next) => {\r\n    res.status(404).send('We think you are lost.');\r\n    next();\r\n});\r\n\r\n// 500 - Internal server error\r\napp.use((err, req, res, next) => {\r\n    console.log(err.stack);\r\n    res.sendFile(path.join(__dirname, '../public/500.html'));\r\n    next();\r\n});\r\n\r\n\r\nconst connection = require('./connection.string');\r\n\r\napp.set('port', connection.port);\r\napp.listen(app.get('port'), err => {\r\n  if(err) console.error(err);\r\n  console.log(`Server listening on port ${app.get('port')}...`);\r\n  const db = mongoose.connect(connection.db);\r\n  mongoose.connection.on('connected', () => {\r\n    console.log(`Mongoose connected to ${connection.db}`);\r\n  });\r\n});\r\n\r\n// const PORT = process.env.PORT || 3000;\r\n// app.listen(PORT, () => console.info(`Server has started on ${PORT}`));\r\n\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1551183910082
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\all-models.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\all-models.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\all-models.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\all-models.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "all-models.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar fs = require('fs'); //require all the models \n\n\nvar models = {};\nvar names = fs.readdirSync('src/models');\nnames.forEach(function (name) {\n  if (!name.match(/\\.js$/)) return;\n  if (name === 'connection-string.js' || name === 'all-models.js') return;\n\n  var model = require('./' + name);\n\n  models[model.modelName] = model;\n}); // define non-enumerable method to place each model onto an object. primarily for making them global\n\nObject.defineProperty(models.__proto__, 'toContext', {\n  enumerable: false,\n  value: function value(context) {\n    for (var name in this) {\n      context[name] = this[name];\n    }\n\n    return context;\n  }\n});\nmodule.exports = models;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsbC1tb2RlbHMuanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwibW9kZWxzIiwibmFtZXMiLCJyZWFkZGlyU3luYyIsImZvckVhY2giLCJuYW1lIiwibWF0Y2giLCJtb2RlbCIsIm1vZGVsTmFtZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19wcm90b19fIiwiZW51bWVyYWJsZSIsInZhbHVlIiwiY29udGV4dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFoQixDLENBRUE7OztBQUNBLElBQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsSUFBSUMsS0FBSyxHQUFHSCxFQUFFLENBQUNJLFdBQUgsQ0FBZSxZQUFmLENBQVo7QUFFQUQsS0FBSyxDQUFDRSxPQUFOLENBQWMsVUFBQUMsSUFBSSxFQUFJO0FBQ3BCLE1BQUksQ0FBQ0EsSUFBSSxDQUFDQyxLQUFMLENBQVcsT0FBWCxDQUFMLEVBQTBCO0FBQzFCLE1BQUlELElBQUksS0FBSyxzQkFBVCxJQUFtQ0EsSUFBSSxLQUFLLGVBQWhELEVBQWlFOztBQUNqRSxNQUFJRSxLQUFLLEdBQUdQLE9BQU8sQ0FBQyxPQUFPSyxJQUFSLENBQW5COztBQUNBSixFQUFBQSxNQUFNLENBQUNNLEtBQUssQ0FBQ0MsU0FBUCxDQUFOLEdBQTBCRCxLQUExQjtBQUNELENBTEQsRSxDQU9BOztBQUNBRSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JULE1BQU0sQ0FBQ1UsU0FBN0IsRUFBd0MsV0FBeEMsRUFBcUQ7QUFDbkRDLEVBQUFBLFVBQVUsRUFBRSxLQUR1QztBQUVuREMsRUFBQUEsS0FBSyxFQUFFLGVBQVNDLE9BQVQsRUFBa0I7QUFDdkIsU0FBSyxJQUFJVCxJQUFULElBQWlCLElBQWpCLEVBQXVCO0FBQ3JCUyxNQUFBQSxPQUFPLENBQUNULElBQUQsQ0FBUCxHQUFnQixLQUFLQSxJQUFMLENBQWhCO0FBQ0Q7O0FBQ0QsV0FBT1MsT0FBUDtBQUNEO0FBUGtELENBQXJEO0FBV0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsTUFBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmNcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbi8vcmVxdWlyZSBhbGwgdGhlIG1vZGVscyBcbnZhciBtb2RlbHMgPSB7fTtcbnZhciBuYW1lcyA9IGZzLnJlYWRkaXJTeW5jKCdzcmMvbW9kZWxzJyk7XG5cbm5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gIGlmICghbmFtZS5tYXRjaCgvXFwuanMkLykpIHJldHVybjtcbiAgaWYgKG5hbWUgPT09ICdjb25uZWN0aW9uLXN0cmluZy5qcycgfHwgbmFtZSA9PT0gJ2FsbC1tb2RlbHMuanMnKSByZXR1cm47XG4gIHZhciBtb2RlbCA9IHJlcXVpcmUoJy4vJyArIG5hbWUpO1xuICBtb2RlbHNbbW9kZWwubW9kZWxOYW1lXSA9IG1vZGVsO1xufSk7XG5cbi8vIGRlZmluZSBub24tZW51bWVyYWJsZSBtZXRob2QgdG8gcGxhY2UgZWFjaCBtb2RlbCBvbnRvIGFuIG9iamVjdC4gcHJpbWFyaWx5IGZvciBtYWtpbmcgdGhlbSBnbG9iYWxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbHMuX19wcm90b19fLCAndG9Db250ZXh0Jywge1xuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgdmFsdWU6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgIGNvbnRleHRbbmFtZV0gPSB0aGlzW25hbWVdOyBcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cbn0pO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGVsczsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "all-models.js"
      ],
      "names": [
        "fs",
        "require",
        "models",
        "names",
        "readdirSync",
        "forEach",
        "name",
        "match",
        "model",
        "modelName",
        "Object",
        "defineProperty",
        "__proto__",
        "enumerable",
        "value",
        "context",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB,C,CAEA;;;AACA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,KAAK,GAAGH,EAAE,CAACI,WAAH,CAAe,YAAf,CAAZ;AAEAD,KAAK,CAACE,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,MAAI,CAACA,IAAI,CAACC,KAAL,CAAW,OAAX,CAAL,EAA0B;AAC1B,MAAID,IAAI,KAAK,sBAAT,IAAmCA,IAAI,KAAK,eAAhD,EAAiE;;AACjE,MAAIE,KAAK,GAAGP,OAAO,CAAC,OAAOK,IAAR,CAAnB;;AACAJ,EAAAA,MAAM,CAACM,KAAK,CAACC,SAAP,CAAN,GAA0BD,KAA1B;AACD,CALD,E,CAOA;;AACAE,MAAM,CAACC,cAAP,CAAsBT,MAAM,CAACU,SAA7B,EAAwC,WAAxC,EAAqD;AACnDC,EAAAA,UAAU,EAAE,KADuC;AAEnDC,EAAAA,KAAK,EAAE,eAASC,OAAT,EAAkB;AACvB,SAAK,IAAIT,IAAT,IAAiB,IAAjB,EAAuB;AACrBS,MAAAA,OAAO,CAACT,IAAD,CAAP,GAAgB,KAAKA,IAAL,CAAhB;AACD;;AACD,WAAOS,OAAP;AACD;AAPkD,CAArD;AAWAC,MAAM,CAACC,OAAP,GAAiBf,MAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "var fs = require('fs');\n\n//require all the models \nvar models = {};\nvar names = fs.readdirSync('src/models');\n\nnames.forEach(name => {\n  if (!name.match(/\\.js$/)) return;\n  if (name === 'connection-string.js' || name === 'all-models.js') return;\n  var model = require('./' + name);\n  models[model.modelName] = model;\n});\n\n// define non-enumerable method to place each model onto an object. primarily for making them global\nObject.defineProperty(models.__proto__, 'toContext', {\n  enumerable: false,\n  value: function(context) {\n    for (var name in this) {\n      context[name] = this[name]; \n    }\n    return context;\n  }\n});\n \n\nmodule.exports = models;"
      ]
    },
    "sourceType": "script",
    "mtime": 1550578475277
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\User.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\User.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\User.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\User.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "User.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongoose = _interopRequireDefault(require(\"mongoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Schema = _mongoose.default.Schema;\n\nif (_mongoose.default.connection.readyState === 0) {\n  _mongoose.default.connect(require('./connection-string'));\n}\n\nvar newSchema = new Schema({\n  'name': {\n    type: String\n  },\n  'email': {\n    type: String\n  },\n  'password': {\n    type: String\n  },\n  'createdAt': {\n    type: Date,\n    default: Date.now\n  },\n  'updatedAt': {\n    type: Date,\n    default: Date.now\n  }\n});\nnewSchema.pre('save', function (next) {\n  this.updatedAt = Date.now();\n  next();\n});\nnewSchema.pre('update', function () {\n  this.update({}, {\n    $set: {\n      updatedAt: Date.now()\n    }\n  });\n});\nnewSchema.pre('findOneAndUpdate', function () {\n  this.update({}, {\n    $set: {\n      updatedAt: Date.now()\n    }\n  });\n});\nmodule.exports = _mongoose.default.model('User', newSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXIuanMiXSwibmFtZXMiOlsiU2NoZW1hIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbm5lY3QiLCJyZXF1aXJlIiwibmV3U2NoZW1hIiwidHlwZSIsIlN0cmluZyIsIkRhdGUiLCJkZWZhdWx0Iiwibm93IiwicHJlIiwibmV4dCIsInVwZGF0ZWRBdCIsInVwZGF0ZSIsIiRzZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQSxJQUFJQSxNQUFNLEdBQUdDLGtCQUFTRCxNQUF0Qjs7QUFDQSxJQUFJQyxrQkFBU0MsVUFBVCxDQUFvQkMsVUFBcEIsS0FBbUMsQ0FBdkMsRUFBMEM7QUFDeENGLG9CQUFTRyxPQUFULENBQWlCQyxPQUFPLENBQUMscUJBQUQsQ0FBeEI7QUFDRDs7QUFHRCxJQUFJQyxTQUFTLEdBQUcsSUFBSU4sTUFBSixDQUFXO0FBRXpCLFVBQVE7QUFBRU8sSUFBQUEsSUFBSSxFQUFFQztBQUFSLEdBRmlCO0FBR3pCLFdBQVM7QUFBRUQsSUFBQUEsSUFBSSxFQUFFQztBQUFSLEdBSGdCO0FBSXpCLGNBQVk7QUFBRUQsSUFBQUEsSUFBSSxFQUFFQztBQUFSLEdBSmE7QUFLekIsZUFBYTtBQUFFRCxJQUFBQSxJQUFJLEVBQUVFLElBQVI7QUFBY0MsSUFBQUEsT0FBTyxFQUFFRCxJQUFJLENBQUNFO0FBQTVCLEdBTFk7QUFNekIsZUFBYTtBQUFFSixJQUFBQSxJQUFJLEVBQUVFLElBQVI7QUFBY0MsSUFBQUEsT0FBTyxFQUFFRCxJQUFJLENBQUNFO0FBQTVCO0FBTlksQ0FBWCxDQUFoQjtBQVNBTCxTQUFTLENBQUNNLEdBQVYsQ0FBYyxNQUFkLEVBQXNCLFVBQVNDLElBQVQsRUFBYztBQUNsQyxPQUFLQyxTQUFMLEdBQWlCTCxJQUFJLENBQUNFLEdBQUwsRUFBakI7QUFDQUUsRUFBQUEsSUFBSTtBQUNMLENBSEQ7QUFLQVAsU0FBUyxDQUFDTSxHQUFWLENBQWMsUUFBZCxFQUF3QixZQUFXO0FBQ2pDLE9BQUtHLE1BQUwsQ0FBWSxFQUFaLEVBQWdCO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFFRixNQUFBQSxTQUFTLEVBQUVMLElBQUksQ0FBQ0UsR0FBTDtBQUFiO0FBQVIsR0FBaEI7QUFDRCxDQUZEO0FBSUFMLFNBQVMsQ0FBQ00sR0FBVixDQUFjLGtCQUFkLEVBQWtDLFlBQVc7QUFDM0MsT0FBS0csTUFBTCxDQUFZLEVBQVosRUFBZ0I7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVGLE1BQUFBLFNBQVMsRUFBRUwsSUFBSSxDQUFDRSxHQUFMO0FBQWI7QUFBUixHQUFoQjtBQUNELENBRkQ7QUFNQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsa0JBQVNrQixLQUFULENBQWUsTUFBZixFQUF1QmIsU0FBdkIsQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmNcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSdcbnZhciBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XG5pZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAwKSB7XG4gIG1vbmdvb3NlLmNvbm5lY3QocmVxdWlyZSgnLi9jb25uZWN0aW9uLXN0cmluZycpKTtcbn1cblxuXG52YXIgbmV3U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gIFxuICAnbmFtZSc6IHsgdHlwZTogU3RyaW5nIH0sXG4gICdlbWFpbCc6IHsgdHlwZTogU3RyaW5nIH0sXG4gICdwYXNzd29yZCc6IHsgdHlwZTogU3RyaW5nIH0sXG4gICdjcmVhdGVkQXQnOiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IERhdGUubm93IH0sXG4gICd1cGRhdGVkQXQnOiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IERhdGUubm93IH1cbn0pO1xuXG5uZXdTY2hlbWEucHJlKCdzYXZlJywgZnVuY3Rpb24obmV4dCl7XG4gIHRoaXMudXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgbmV4dCgpO1xufSk7XG5cbm5ld1NjaGVtYS5wcmUoJ3VwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICB0aGlzLnVwZGF0ZSh7fSwgeyAkc2V0OiB7IHVwZGF0ZWRBdDogRGF0ZS5ub3coKSB9IH0pO1xufSk7XG5cbm5ld1NjaGVtYS5wcmUoJ2ZpbmRPbmVBbmRVcGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgdGhpcy51cGRhdGUoe30sIHsgJHNldDogeyB1cGRhdGVkQXQ6IERhdGUubm93KCkgfSB9KTtcbn0pO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIG5ld1NjaGVtYSk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "User.js"
      ],
      "names": [
        "Schema",
        "mongoose",
        "connection",
        "readyState",
        "connect",
        "require",
        "newSchema",
        "type",
        "String",
        "Date",
        "default",
        "now",
        "pre",
        "next",
        "updatedAt",
        "update",
        "$set",
        "module",
        "exports",
        "model"
      ],
      "mappings": ";;AAAA;;;;AACA,IAAIA,MAAM,GAAGC,kBAASD,MAAtB;;AACA,IAAIC,kBAASC,UAAT,CAAoBC,UAApB,KAAmC,CAAvC,EAA0C;AACxCF,oBAASG,OAAT,CAAiBC,OAAO,CAAC,qBAAD,CAAxB;AACD;;AAGD,IAAIC,SAAS,GAAG,IAAIN,MAAJ,CAAW;AAEzB,UAAQ;AAAEO,IAAAA,IAAI,EAAEC;AAAR,GAFiB;AAGzB,WAAS;AAAED,IAAAA,IAAI,EAAEC;AAAR,GAHgB;AAIzB,cAAY;AAAED,IAAAA,IAAI,EAAEC;AAAR,GAJa;AAKzB,eAAa;AAAED,IAAAA,IAAI,EAAEE,IAAR;AAAcC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAA5B,GALY;AAMzB,eAAa;AAAEJ,IAAAA,IAAI,EAAEE,IAAR;AAAcC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAA5B;AANY,CAAX,CAAhB;AASAL,SAAS,CAACM,GAAV,CAAc,MAAd,EAAsB,UAASC,IAAT,EAAc;AAClC,OAAKC,SAAL,GAAiBL,IAAI,CAACE,GAAL,EAAjB;AACAE,EAAAA,IAAI;AACL,CAHD;AAKAP,SAAS,CAACM,GAAV,CAAc,QAAd,EAAwB,YAAW;AACjC,OAAKG,MAAL,CAAY,EAAZ,EAAgB;AAAEC,IAAAA,IAAI,EAAE;AAAEF,MAAAA,SAAS,EAAEL,IAAI,CAACE,GAAL;AAAb;AAAR,GAAhB;AACD,CAFD;AAIAL,SAAS,CAACM,GAAV,CAAc,kBAAd,EAAkC,YAAW;AAC3C,OAAKG,MAAL,CAAY,EAAZ,EAAgB;AAAEC,IAAAA,IAAI,EAAE;AAAEF,MAAAA,SAAS,EAAEL,IAAI,CAACE,GAAL;AAAb;AAAR,GAAhB;AACD,CAFD;AAMAM,MAAM,CAACC,OAAP,GAAiBjB,kBAASkB,KAAT,CAAe,MAAf,EAAuBb,SAAvB,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "import mongoose from 'mongoose'\nvar Schema = mongoose.Schema;\nif (mongoose.connection.readyState === 0) {\n  mongoose.connect(require('./connection-string'));\n}\n\n\nvar newSchema = new Schema({\n  \n  'name': { type: String },\n  'email': { type: String },\n  'password': { type: String },\n  'createdAt': { type: Date, default: Date.now },\n  'updatedAt': { type: Date, default: Date.now }\n});\n\nnewSchema.pre('save', function(next){\n  this.updatedAt = Date.now();\n  next();\n});\n\nnewSchema.pre('update', function() {\n  this.update({}, { $set: { updatedAt: Date.now() } });\n});\n\nnewSchema.pre('findOneAndUpdate', function() {\n  this.update({}, { $set: { updatedAt: Date.now() } });\n});\n\n\n\nmodule.exports = mongoose.model('User', newSchema);\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550578545530
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\connection-string.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\connection-string.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\connection-string.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\connection-string.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "connection-string.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n// place connection string here\n// e.g. var uri = 'mongodb://andy:corn@ds051334.mongolab.com:51334/cli';\n// or   var uri = 'mongodb://andy:corn@localhost:27017/cli';\n// or   var uri = config.get('mongo');\n// or   var uri = process.env.MONGO_URL\nvar url = require('url');\n\nvar uri = 'mongodb://localhost:27017/roshni_kyada';\n\nif (!uri) {\n  throw new Error('You need to provide the connection string. ' + 'You can open \"models/connection-string.js\" and export it or use the \"setUri\" command.');\n}\n\nvar uriObj = url.parse(uri);\n\nif (uriObj.protocol !== 'mongodb:') {\n  throw new Error('Must be a mongodb URI');\n}\n\nif (!uriObj.host || !uriObj.path) {\n  throw new Error('Improperly formatted URI');\n}\n\nmodule.exports = uri;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3Rpb24tc3RyaW5nLmpzIl0sIm5hbWVzIjpbInVybCIsInJlcXVpcmUiLCJ1cmkiLCJFcnJvciIsInVyaU9iaiIsInBhcnNlIiwicHJvdG9jb2wiLCJob3N0IiwicGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLEdBQUcsR0FBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBakI7O0FBRUEsSUFBSUMsR0FBRyxHQUFHLHdDQUFWOztBQUNBLElBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ1IsUUFBTSxJQUFJQyxLQUFKLENBQ0osZ0RBQ0EsdUZBRkksQ0FBTjtBQUlEOztBQUVELElBQUlDLE1BQU0sR0FBR0osR0FBRyxDQUFDSyxLQUFKLENBQVVILEdBQVYsQ0FBYjs7QUFDQSxJQUFJRSxNQUFNLENBQUNFLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsUUFBTSxJQUFJSCxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNEOztBQUNELElBQUksQ0FBQ0MsTUFBTSxDQUFDRyxJQUFSLElBQWdCLENBQUNILE1BQU0sQ0FBQ0ksSUFBNUIsRUFBa0M7QUFDaEMsUUFBTSxJQUFJTCxLQUFKLENBQVUsMEJBQVYsQ0FBTjtBQUNEOztBQUVETSxNQUFNLENBQUNDLE9BQVAsR0FBaUJSLEdBQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdFxcc3JjXFxtb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwbGFjZSBjb25uZWN0aW9uIHN0cmluZyBoZXJlXG4vLyBlLmcuIHZhciB1cmkgPSAnbW9uZ29kYjovL2FuZHk6Y29ybkBkczA1MTMzNC5tb25nb2xhYi5jb206NTEzMzQvY2xpJztcbi8vIG9yICAgdmFyIHVyaSA9ICdtb25nb2RiOi8vYW5keTpjb3JuQGxvY2FsaG9zdDoyNzAxNy9jbGknO1xuLy8gb3IgICB2YXIgdXJpID0gY29uZmlnLmdldCgnbW9uZ28nKTtcbi8vIG9yICAgdmFyIHVyaSA9IHByb2Nlc3MuZW52Lk1PTkdPX1VSTFxuXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcblxudmFyIHVyaSA9ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L3Jvc2huaV9reWFkYSc7XG5pZiAoIXVyaSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ1lvdSBuZWVkIHRvIHByb3ZpZGUgdGhlIGNvbm5lY3Rpb24gc3RyaW5nLiAnICtcbiAgICAnWW91IGNhbiBvcGVuIFwibW9kZWxzL2Nvbm5lY3Rpb24tc3RyaW5nLmpzXCIgYW5kIGV4cG9ydCBpdCBvciB1c2UgdGhlIFwic2V0VXJpXCIgY29tbWFuZC4nXG4gICk7XG59XG5cbnZhciB1cmlPYmogPSB1cmwucGFyc2UodXJpKVxuaWYgKHVyaU9iai5wcm90b2NvbCAhPT0gJ21vbmdvZGI6Jykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgYmUgYSBtb25nb2RiIFVSSScpXG59XG5pZiAoIXVyaU9iai5ob3N0IHx8ICF1cmlPYmoucGF0aCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0ltcHJvcGVybHkgZm9ybWF0dGVkIFVSSScpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXJpO1xuXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "connection-string.js"
      ],
      "names": [
        "url",
        "require",
        "uri",
        "Error",
        "uriObj",
        "parse",
        "protocol",
        "host",
        "path",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA;AACA;AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIC,GAAG,GAAG,wCAAV;;AACA,IAAI,CAACA,GAAL,EAAU;AACR,QAAM,IAAIC,KAAJ,CACJ,gDACA,uFAFI,CAAN;AAID;;AAED,IAAIC,MAAM,GAAGJ,GAAG,CAACK,KAAJ,CAAUH,GAAV,CAAb;;AACA,IAAIE,MAAM,CAACE,QAAP,KAAoB,UAAxB,EAAoC;AAClC,QAAM,IAAIH,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,IAAI,CAACC,MAAM,CAACG,IAAR,IAAgB,CAACH,MAAM,CAACI,IAA5B,EAAkC;AAChC,QAAM,IAAIL,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBR,GAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "// place connection string here\n// e.g. var uri = 'mongodb://andy:corn@ds051334.mongolab.com:51334/cli';\n// or   var uri = 'mongodb://andy:corn@localhost:27017/cli';\n// or   var uri = config.get('mongo');\n// or   var uri = process.env.MONGO_URL\n\nvar url = require('url')\n\nvar uri = 'mongodb://localhost:27017/roshni_kyada';\nif (!uri) {\n  throw new Error(\n    'You need to provide the connection string. ' +\n    'You can open \"models/connection-string.js\" and export it or use the \"setUri\" command.'\n  );\n}\n\nvar uriObj = url.parse(uri)\nif (uriObj.protocol !== 'mongodb:') {\n  throw new Error('Must be a mongodb URI')\n}\nif (!uriObj.host || !uriObj.path) {\n  throw new Error('Improperly formatted URI')\n}\n\nmodule.exports = uri;\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550575434076
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\\\\user.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\user.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\user.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\user.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
        "sourceFileName": "user.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar UserModel = require('../models/user.model');\n\nvar jwt = require('jsonwebtoken');\n\nvar config = require('../config');\n\nvar middleware = require('../middleware');\n\nvar logger = require('../logger');\n\nvar router = express.Router(); // Create a new user - POST API\n\nrouter.post('/user/register', function (req, res) {\n  // save logic req.body\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var model = new UserModel(req.body);\n  model.save().then(function (doc) {\n    if (!doc || doc.length === 0) {\n      return res.status(500).send(doc);\n    }\n\n    res.status(201).send(doc);\n  }).catch(function (err) {\n    logger.log({\n      level: 'error',\n      message: err\n    });\n  });\n}); // Create a new user - POST API\n\nrouter.get('/user/login', function (req, res) {\n  // save logic req.body\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var _email = req.body.email;\n  var _pw = req.body.password;\n\n  if (_email && _pw) {\n    UserModel.findOne({\n      email: _email,\n      password: _pw\n    }).then(function (doc) {\n      if (doc) {\n        var token = jwt.sign({\n          email: _email\n        }, config.secret, {\n          expiresIn: '24h' // expires in 24 hours\n\n        }); // return the JWT token for the future API calls\n\n        res.json({\n          success: true,\n          message: 'Authentication successful!',\n          token: token\n        });\n      } else {\n        // logger.log({\n        //     level: 'error',\n        //     message: 'Hello distributed log files!'\n        //   });\n        res.status(403).json({\n          success: false,\n          message: 'Incorrect username or password'\n        });\n      }\n    }).catch(function (err) {\n      logger.log({\n        level: 'error',\n        message: err\n      });\n    });\n  }\n}); //Check Token\n\nrouter.get('/verifytoken', middleware.checkToken, function (req, res) {\n  res.send('Verified token');\n}); // Get Customer Get API\n\nrouter.get('/userall', function (req, res) {\n  UserModel.find({}).then(function (doc) {\n    res.status(201).send(doc);\n  }).catch(function (err) {\n    logger.log({\n      level: 'error',\n      message: err\n    });\n  });\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "user.js"
      ],
      "names": [
        "express",
        "require",
        "UserModel",
        "jwt",
        "config",
        "middleware",
        "logger",
        "router",
        "Router",
        "post",
        "req",
        "res",
        "Object",
        "keys",
        "body",
        "length",
        "status",
        "send",
        "model",
        "save",
        "then",
        "doc",
        "catch",
        "err",
        "log",
        "level",
        "message",
        "get",
        "_email",
        "email",
        "_pw",
        "password",
        "findOne",
        "token",
        "sign",
        "secret",
        "expiresIn",
        "json",
        "success",
        "checkToken",
        "find",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAvB;;AAEA,IAAIE,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAApB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIK,MAAM,GAAGL,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIM,MAAM,GAAGP,OAAO,CAACQ,MAAR,EAAb,C,CAEA;;AACAD,MAAM,CAACE,IAAP,CAAY,gBAAZ,EAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC;AACA,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AAED,MAAIC,KAAK,GAAG,IAAIhB,SAAJ,CAAcQ,GAAG,CAACI,IAAlB,CAAZ;AACAI,EAAAA,KAAK,CAACC,IAAN,GACKC,IADL,CACU,UAAAC,GAAG,EAAI;AACT,QAAI,CAACA,GAAD,IAAQA,GAAG,CAACN,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,aAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,GAArB,CAAP;AACH;;AACDV,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,GAArB;AACH,GANL,EAOKC,KAPL,CAOW,UAAAC,GAAG,EAAI;AACVjB,IAAAA,MAAM,CAACkB,GAAP,CAAW;AACPC,MAAAA,KAAK,EAAE,OADA;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAX;AAIH,GAZL;AAaH,CApBD,E,CAsBA;;AACAhB,MAAM,CAACoB,GAAP,CAAW,aAAX,EAA0B,UAACjB,GAAD,EAAMC,GAAN,EAAc;AACpC;AACA,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AAED,MAAIW,MAAM,GAAGlB,GAAG,CAACI,IAAJ,CAASe,KAAtB;AACA,MAAIC,GAAG,GAAGpB,GAAG,CAACI,IAAJ,CAASiB,QAAnB;;AAEA,MAAIH,MAAM,IAAIE,GAAd,EAAmB;AACf5B,IAAAA,SAAS,CAAC8B,OAAV,CAAkB;AACdH,MAAAA,KAAK,EAAED,MADO;AACCG,MAAAA,QAAQ,EAAED;AADX,KAAlB,EAEGV,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX,UAAIA,GAAJ,EAAS;AACL,YAAIY,KAAK,GAAG9B,GAAG,CAAC+B,IAAJ,CAAS;AAAEL,UAAAA,KAAK,EAAED;AAAT,SAAT,EACRxB,MAAM,CAAC+B,MADC,EAER;AACIC,UAAAA,SAAS,EAAE,KADf,CACqB;;AADrB,SAFQ,CAAZ,CADK,CAOL;;AACAzB,QAAAA,GAAG,CAAC0B,IAAJ,CAAS;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELZ,UAAAA,OAAO,EAAE,4BAFJ;AAGLO,UAAAA,KAAK,EAAEA;AAHF,SAAT;AAKH,OAbD,MAaO;AACH;AACA;AACA;AACA;AACAtB,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACjBC,UAAAA,OAAO,EAAE,KADQ;AAEjBZ,UAAAA,OAAO,EAAE;AAFQ,SAArB;AAKH;AACJ,KA3BD,EA4BKJ,KA5BL,CA4BW,UAAAC,GAAG,EAAI;AACVjB,MAAAA,MAAM,CAACkB,GAAP,CAAW;AACPC,QAAAA,KAAK,EAAE,OADA;AAEPC,QAAAA,OAAO,EAAEH;AAFF,OAAX;AAIH,KAjCL;AAkCH;AAEJ,CA9CD,E,CAgDA;;AACAhB,MAAM,CAACoB,GAAP,CAAW,cAAX,EAA2BtB,UAAU,CAACkC,UAAtC,EAAkD,UAAC7B,GAAD,EAAMC,GAAN,EAAc;AAC5DA,EAAAA,GAAG,CAACM,IAAJ,CAAS,gBAAT;AACH,CAFD,E,CAIA;;AACAV,MAAM,CAACoB,GAAP,CAAW,UAAX,EAAuB,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAEjCT,EAAAA,SAAS,CAACsC,IAAV,CAAe,EAAf,EAEKpB,IAFL,CAEU,UAAAC,GAAG,EAAI;AACTV,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,GAArB;AACH,GAJL,EAKKC,KALL,CAKW,UAAAC,GAAG,EAAI;AACVjB,IAAAA,MAAM,CAACkB,GAAP,CAAW;AACPC,MAAAA,KAAK,EAAE,OADA;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAX;AAIH,GAVL;AAWH,CAbD;AAeAkB,MAAM,CAACC,OAAP,GAAiBnC,MAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "sourcesContent": [
        "let express = require('express');\r\nlet UserModel = require('../models/user.model');\r\n\r\nlet jwt = require('jsonwebtoken');\r\nlet config = require('../config');\r\nlet middleware = require('../middleware');\r\nlet logger = require('../logger');\r\nlet router = express.Router();\r\n\r\n// Create a new user - POST API\r\nrouter.post('/user/register', (req, res) => {\r\n    // save logic req.body\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n\r\n    let model = new UserModel(req.body);\r\n    model.save()\r\n        .then(doc => {\r\n            if (!doc || doc.length === 0) {\r\n                return res.status(500).send(doc);\r\n            }\r\n            res.status(201).send(doc);\r\n        })\r\n        .catch(err => {\r\n            logger.log({\r\n                level: 'error',\r\n                message: err\r\n            });\r\n        });\r\n});\r\n\r\n// Create a new user - POST API\r\nrouter.get('/user/login', (req, res) => {\r\n    // save logic req.body\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n\r\n    let _email = req.body.email\r\n    let _pw = req.body.password\r\n\r\n    if (_email && _pw) {\r\n        UserModel.findOne({\r\n            email: _email, password: _pw\r\n        }).then(doc => {\r\n            if (doc) {\r\n                let token = jwt.sign({ email: _email },\r\n                    config.secret,\r\n                    {\r\n                        expiresIn: '24h' // expires in 24 hours\r\n                    }\r\n                );\r\n                // return the JWT token for the future API calls\r\n                res.json({\r\n                    success: true,\r\n                    message: 'Authentication successful!',\r\n                    token: token\r\n                });\r\n            } else {\r\n                // logger.log({\r\n                //     level: 'error',\r\n                //     message: 'Hello distributed log files!'\r\n                //   });\r\n                res.status(403).json({\r\n                    success: false,\r\n                    message: 'Incorrect username or password'\r\n                });\r\n\r\n            }\r\n        })\r\n            .catch(err => {\r\n                logger.log({\r\n                    level: 'error',\r\n                    message: err\r\n                });\r\n            });\r\n    }\r\n\r\n});\r\n\r\n//Check Token\r\nrouter.get('/verifytoken', middleware.checkToken, (req, res) => {\r\n    res.send('Verified token');\r\n});\r\n\r\n// Get Customer Get API\r\nrouter.get('/userall', (req, res) => {\r\n\r\n    UserModel.find({\r\n    })\r\n        .then(doc => {\r\n            res.status(201).send(doc);\r\n        })\r\n        .catch(err => {\r\n            logger.log({\r\n                level: 'error',\r\n                message: err\r\n            });\r\n        });\r\n});\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "script",
    "mtime": 1551187727444
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\user.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\user.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\user.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\user.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "user.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongoose = _interopRequireDefault(require(\"mongoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Schema = _mongoose.default.Schema;\n\nif (_mongoose.default.connection.readyState === 0) {\n  _mongoose.default.connect(require('./connection-string'));\n}\n\nvar newSchema = new Schema({\n  'name': {\n    type: String\n  },\n  'email': {\n    type: String\n  },\n  'password': {\n    type: String\n  },\n  'createdAt': {\n    type: Date,\n    default: Date.now\n  },\n  'updatedAt': {\n    type: Date,\n    default: Date.now\n  }\n});\nnewSchema.pre('save', function (next) {\n  this.updatedAt = Date.now();\n  next();\n});\nnewSchema.pre('update', function () {\n  this.update({}, {\n    $set: {\n      updatedAt: Date.now()\n    }\n  });\n});\nnewSchema.pre('findOneAndUpdate', function () {\n  this.update({}, {\n    $set: {\n      updatedAt: Date.now()\n    }\n  });\n});\nmodule.exports = _mongoose.default.model('User', newSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIuanMiXSwibmFtZXMiOlsiU2NoZW1hIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbm5lY3QiLCJyZXF1aXJlIiwibmV3U2NoZW1hIiwidHlwZSIsIlN0cmluZyIsIkRhdGUiLCJkZWZhdWx0Iiwibm93IiwicHJlIiwibmV4dCIsInVwZGF0ZWRBdCIsInVwZGF0ZSIsIiRzZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQSxJQUFJQSxNQUFNLEdBQUdDLGtCQUFTRCxNQUF0Qjs7QUFDQSxJQUFJQyxrQkFBU0MsVUFBVCxDQUFvQkMsVUFBcEIsS0FBbUMsQ0FBdkMsRUFBMEM7QUFDeENGLG9CQUFTRyxPQUFULENBQWlCQyxPQUFPLENBQUMscUJBQUQsQ0FBeEI7QUFDRDs7QUFHRCxJQUFJQyxTQUFTLEdBQUcsSUFBSU4sTUFBSixDQUFXO0FBRXpCLFVBQVE7QUFBRU8sSUFBQUEsSUFBSSxFQUFFQztBQUFSLEdBRmlCO0FBR3pCLFdBQVM7QUFBRUQsSUFBQUEsSUFBSSxFQUFFQztBQUFSLEdBSGdCO0FBSXpCLGNBQVk7QUFBRUQsSUFBQUEsSUFBSSxFQUFFQztBQUFSLEdBSmE7QUFLekIsZUFBYTtBQUFFRCxJQUFBQSxJQUFJLEVBQUVFLElBQVI7QUFBY0MsSUFBQUEsT0FBTyxFQUFFRCxJQUFJLENBQUNFO0FBQTVCLEdBTFk7QUFNekIsZUFBYTtBQUFFSixJQUFBQSxJQUFJLEVBQUVFLElBQVI7QUFBY0MsSUFBQUEsT0FBTyxFQUFFRCxJQUFJLENBQUNFO0FBQTVCO0FBTlksQ0FBWCxDQUFoQjtBQVNBTCxTQUFTLENBQUNNLEdBQVYsQ0FBYyxNQUFkLEVBQXNCLFVBQVNDLElBQVQsRUFBYztBQUNsQyxPQUFLQyxTQUFMLEdBQWlCTCxJQUFJLENBQUNFLEdBQUwsRUFBakI7QUFDQUUsRUFBQUEsSUFBSTtBQUNMLENBSEQ7QUFLQVAsU0FBUyxDQUFDTSxHQUFWLENBQWMsUUFBZCxFQUF3QixZQUFXO0FBQ2pDLE9BQUtHLE1BQUwsQ0FBWSxFQUFaLEVBQWdCO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFFRixNQUFBQSxTQUFTLEVBQUVMLElBQUksQ0FBQ0UsR0FBTDtBQUFiO0FBQVIsR0FBaEI7QUFDRCxDQUZEO0FBSUFMLFNBQVMsQ0FBQ00sR0FBVixDQUFjLGtCQUFkLEVBQWtDLFlBQVc7QUFDM0MsT0FBS0csTUFBTCxDQUFZLEVBQVosRUFBZ0I7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVGLE1BQUFBLFNBQVMsRUFBRUwsSUFBSSxDQUFDRSxHQUFMO0FBQWI7QUFBUixHQUFoQjtBQUNELENBRkQ7QUFNQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsa0JBQVNrQixLQUFULENBQWUsTUFBZixFQUF1QmIsU0FBdkIsQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmNcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSdcbnZhciBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XG5pZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAwKSB7XG4gIG1vbmdvb3NlLmNvbm5lY3QocmVxdWlyZSgnLi9jb25uZWN0aW9uLXN0cmluZycpKTtcbn1cblxuXG52YXIgbmV3U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gIFxuICAnbmFtZSc6IHsgdHlwZTogU3RyaW5nIH0sXG4gICdlbWFpbCc6IHsgdHlwZTogU3RyaW5nIH0sXG4gICdwYXNzd29yZCc6IHsgdHlwZTogU3RyaW5nIH0sXG4gICdjcmVhdGVkQXQnOiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IERhdGUubm93IH0sXG4gICd1cGRhdGVkQXQnOiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IERhdGUubm93IH1cbn0pO1xuXG5uZXdTY2hlbWEucHJlKCdzYXZlJywgZnVuY3Rpb24obmV4dCl7XG4gIHRoaXMudXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgbmV4dCgpO1xufSk7XG5cbm5ld1NjaGVtYS5wcmUoJ3VwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICB0aGlzLnVwZGF0ZSh7fSwgeyAkc2V0OiB7IHVwZGF0ZWRBdDogRGF0ZS5ub3coKSB9IH0pO1xufSk7XG5cbm5ld1NjaGVtYS5wcmUoJ2ZpbmRPbmVBbmRVcGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgdGhpcy51cGRhdGUoe30sIHsgJHNldDogeyB1cGRhdGVkQXQ6IERhdGUubm93KCkgfSB9KTtcbn0pO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIG5ld1NjaGVtYSk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "user.js"
      ],
      "names": [
        "Schema",
        "mongoose",
        "connection",
        "readyState",
        "connect",
        "require",
        "newSchema",
        "type",
        "String",
        "Date",
        "default",
        "now",
        "pre",
        "next",
        "updatedAt",
        "update",
        "$set",
        "module",
        "exports",
        "model"
      ],
      "mappings": ";;AAAA;;;;AACA,IAAIA,MAAM,GAAGC,kBAASD,MAAtB;;AACA,IAAIC,kBAASC,UAAT,CAAoBC,UAApB,KAAmC,CAAvC,EAA0C;AACxCF,oBAASG,OAAT,CAAiBC,OAAO,CAAC,qBAAD,CAAxB;AACD;;AAGD,IAAIC,SAAS,GAAG,IAAIN,MAAJ,CAAW;AAEzB,UAAQ;AAAEO,IAAAA,IAAI,EAAEC;AAAR,GAFiB;AAGzB,WAAS;AAAED,IAAAA,IAAI,EAAEC;AAAR,GAHgB;AAIzB,cAAY;AAAED,IAAAA,IAAI,EAAEC;AAAR,GAJa;AAKzB,eAAa;AAAED,IAAAA,IAAI,EAAEE,IAAR;AAAcC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAA5B,GALY;AAMzB,eAAa;AAAEJ,IAAAA,IAAI,EAAEE,IAAR;AAAcC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAA5B;AANY,CAAX,CAAhB;AASAL,SAAS,CAACM,GAAV,CAAc,MAAd,EAAsB,UAASC,IAAT,EAAc;AAClC,OAAKC,SAAL,GAAiBL,IAAI,CAACE,GAAL,EAAjB;AACAE,EAAAA,IAAI;AACL,CAHD;AAKAP,SAAS,CAACM,GAAV,CAAc,QAAd,EAAwB,YAAW;AACjC,OAAKG,MAAL,CAAY,EAAZ,EAAgB;AAAEC,IAAAA,IAAI,EAAE;AAAEF,MAAAA,SAAS,EAAEL,IAAI,CAACE,GAAL;AAAb;AAAR,GAAhB;AACD,CAFD;AAIAL,SAAS,CAACM,GAAV,CAAc,kBAAd,EAAkC,YAAW;AAC3C,OAAKG,MAAL,CAAY,EAAZ,EAAgB;AAAEC,IAAAA,IAAI,EAAE;AAAEF,MAAAA,SAAS,EAAEL,IAAI,CAACE,GAAL;AAAb;AAAR,GAAhB;AACD,CAFD;AAMAM,MAAM,CAACC,OAAP,GAAiBjB,kBAASkB,KAAT,CAAe,MAAf,EAAuBb,SAAvB,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "import mongoose from 'mongoose'\nvar Schema = mongoose.Schema;\nif (mongoose.connection.readyState === 0) {\n  mongoose.connect(require('./connection-string'));\n}\n\n\nvar newSchema = new Schema({\n  \n  'name': { type: String },\n  'email': { type: String },\n  'password': { type: String },\n  'createdAt': { type: Date, default: Date.now },\n  'updatedAt': { type: Date, default: Date.now }\n});\n\nnewSchema.pre('save', function(next){\n  this.updatedAt = Date.now();\n  next();\n});\n\nnewSchema.pre('update', function() {\n  this.update({}, { $set: { updatedAt: Date.now() } });\n});\n\nnewSchema.pre('findOneAndUpdate', function() {\n  this.update({}, { $set: { updatedAt: Date.now() } });\n});\n\n\n\nmodule.exports = mongoose.model('User', newSchema);\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550578545530
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\user.model.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\user.model.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\user.model.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\user.model.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "user.model.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar mongoose = require('mongoose');\n\nvar UserSchema = mongoose.Schema({\n  name: String,\n  email: {\n    type: String,\n    require: true,\n    unique: true\n  },\n  password: String\n});\nmodule.exports = mongoose.model('user', UserSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIubW9kZWwuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiVXNlclNjaGVtYSIsIlNjaGVtYSIsIm5hbWUiLCJTdHJpbmciLCJlbWFpbCIsInR5cGUiLCJ1bmlxdWUiLCJwYXNzd29yZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsUUFBUSxDQUFDRyxNQUFULENBQWdCO0FBQzdCQyxFQUFBQSxJQUFJLEVBQUVDLE1BRHVCO0FBRTdCQyxFQUFBQSxLQUFLLEVBQUU7QUFDSEMsSUFBQUEsSUFBSSxFQUFFRixNQURIO0FBRUhKLElBQUFBLE9BQU8sRUFBRSxJQUZOO0FBR0hPLElBQUFBLE1BQU0sRUFBRTtBQUhMLEdBRnNCO0FBTzdCQyxFQUFBQSxRQUFRLEVBQUVKO0FBUG1CLENBQWhCLENBQWpCO0FBVUFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsUUFBUSxDQUFDWSxLQUFULENBQWUsTUFBZixFQUF1QlYsVUFBdkIsQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmNcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImxldCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcblxyXG5sZXQgVXNlclNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICBlbWFpbDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlOiB0cnVlLFxyXG4gICAgICAgIHVuaXF1ZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHBhc3N3b3JkOiBTdHJpbmdcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCd1c2VyJywgVXNlclNjaGVtYSk7XHJcblxyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "user.model.js"
      ],
      "names": [
        "mongoose",
        "require",
        "UserSchema",
        "Schema",
        "name",
        "String",
        "email",
        "type",
        "unique",
        "password",
        "module",
        "exports",
        "model"
      ],
      "mappings": ";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,UAAU,GAAGF,QAAQ,CAACG,MAAT,CAAgB;AAC7BC,EAAAA,IAAI,EAAEC,MADuB;AAE7BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAEF,MADH;AAEHJ,IAAAA,OAAO,EAAE,IAFN;AAGHO,IAAAA,MAAM,EAAE;AAHL,GAFsB;AAO7BC,EAAAA,QAAQ,EAAEJ;AAPmB,CAAhB,CAAjB;AAUAK,MAAM,CAACC,OAAP,GAAiBX,QAAQ,CAACY,KAAT,CAAe,MAAf,EAAuBV,UAAvB,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\r\n\r\nlet UserSchema = mongoose.Schema({\r\n    name: String,\r\n    email: {\r\n        type: String,\r\n        require: true,\r\n        unique: true\r\n    },\r\n    password: String\r\n});\r\n\r\nmodule.exports = mongoose.model('user', UserSchema);\r\n\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550837180198
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\config.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\config.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\config.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
        "sourceFileName": "config.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nmodule.exports = {\n  secret: 'gtl234%%'\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VjcmV0Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsTUFBTSxFQUFFO0FBREssQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0Iiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZWNyZXQ6ICdndGwyMzQlJSdcclxuICB9O1xyXG4gICJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "config.js"
      ],
      "names": [
        "module",
        "exports",
        "secret"
      ],
      "mappings": ";;AAAAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAE;AADK,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourcesContent": [
        "module.exports = {\r\n    secret: 'gtl234%%'\r\n  };\r\n  "
      ]
    },
    "sourceType": "script",
    "mtime": 1550830064623
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\middleware.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\middleware.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\middleware.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\middleware.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
        "sourceFileName": "middleware.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar jwt = require('jsonwebtoken');\n\nvar config = require('./config.js');\n\nvar checkToken = function checkToken(req, res, next) {\n  var token = req.headers['x-access-token'] || req.headers['authorization']; // Express headers are auto converted to lowercase\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        req.decoded = decoded;\n        next();\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n};\n\nmodule.exports = {\n  checkToken: checkToken\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiand0IiwicmVxdWlyZSIsImNvbmZpZyIsImNoZWNrVG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0IiwidG9rZW4iLCJoZWFkZXJzIiwic3RhcnRzV2l0aCIsInNsaWNlIiwibGVuZ3RoIiwidmVyaWZ5Iiwic2VjcmV0IiwiZXJyIiwiZGVjb2RlZCIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUFqQjs7QUFDQSxJQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUVBLElBQUlFLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEVBQW9CO0FBQ25DLE1BQUlDLEtBQUssR0FBR0gsR0FBRyxDQUFDSSxPQUFKLENBQVksZ0JBQVosS0FBaUNKLEdBQUcsQ0FBQ0ksT0FBSixDQUFZLGVBQVosQ0FBN0MsQ0FEbUMsQ0FDd0M7O0FBQzNFLE1BQUlELEtBQUssQ0FBQ0UsVUFBTixDQUFpQixTQUFqQixDQUFKLEVBQWlDO0FBQy9CO0FBQ0FGLElBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDRyxLQUFOLENBQVksQ0FBWixFQUFlSCxLQUFLLENBQUNJLE1BQXJCLENBQVI7QUFDRDs7QUFFRCxNQUFJSixLQUFKLEVBQVc7QUFDVFAsSUFBQUEsR0FBRyxDQUFDWSxNQUFKLENBQVdMLEtBQVgsRUFBa0JMLE1BQU0sQ0FBQ1csTUFBekIsRUFBaUMsVUFBQ0MsR0FBRCxFQUFNQyxPQUFOLEVBQWtCO0FBQ2pELFVBQUlELEdBQUosRUFBUztBQUNQLGVBQU9ULEdBQUcsQ0FBQ1csSUFBSixDQUFTO0FBQ2RDLFVBQUFBLE9BQU8sRUFBRSxLQURLO0FBRWRDLFVBQUFBLE9BQU8sRUFBRTtBQUZLLFNBQVQsQ0FBUDtBQUlELE9BTEQsTUFLTztBQUNMZCxRQUFBQSxHQUFHLENBQUNXLE9BQUosR0FBY0EsT0FBZDtBQUNBVCxRQUFBQSxJQUFJO0FBQ0w7QUFDRixLQVZEO0FBV0QsR0FaRCxNQVlPO0FBQ0wsV0FBT0QsR0FBRyxDQUFDVyxJQUFKLENBQVM7QUFDZEMsTUFBQUEsT0FBTyxFQUFFLEtBREs7QUFFZEMsTUFBQUEsT0FBTyxFQUFFO0FBRkssS0FBVCxDQUFQO0FBSUQ7QUFDRixDQXpCRDs7QUEyQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmakIsRUFBQUEsVUFBVSxFQUFFQTtBQURHLENBQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdCIsInNvdXJjZXNDb250ZW50IjpbImxldCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcclxuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcuanMnKTtcclxuXHJcbmxldCBjaGVja1Rva2VuID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgbGV0IHRva2VuID0gcmVxLmhlYWRlcnNbJ3gtYWNjZXNzLXRva2VuJ10gfHwgcmVxLmhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXTsgLy8gRXhwcmVzcyBoZWFkZXJzIGFyZSBhdXRvIGNvbnZlcnRlZCB0byBsb3dlcmNhc2VcclxuICBpZiAodG9rZW4uc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XHJcbiAgICAvLyBSZW1vdmUgQmVhcmVyIGZyb20gc3RyaW5nXHJcbiAgICB0b2tlbiA9IHRva2VuLnNsaWNlKDcsIHRva2VuLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBpZiAodG9rZW4pIHtcclxuICAgIGp3dC52ZXJpZnkodG9rZW4sIGNvbmZpZy5zZWNyZXQsIChlcnIsIGRlY29kZWQpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbih7XHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpcyBub3QgdmFsaWQnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVxLmRlY29kZWQgPSBkZWNvZGVkO1xyXG4gICAgICAgIG5leHQoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiByZXMuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiAnQXV0aCB0b2tlbiBpcyBub3Qgc3VwcGxpZWQnXHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBjaGVja1Rva2VuOiBjaGVja1Rva2VuXHJcbn0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "middleware.js"
      ],
      "names": [
        "jwt",
        "require",
        "config",
        "checkToken",
        "req",
        "res",
        "next",
        "token",
        "headers",
        "startsWith",
        "slice",
        "length",
        "verify",
        "secret",
        "err",
        "decoded",
        "json",
        "success",
        "message",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AAEA,IAAIE,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAIC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,KAAiCJ,GAAG,CAACI,OAAJ,CAAY,eAAZ,CAA7C,CADmC,CACwC;;AAC3E,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC/B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACI,MAArB,CAAR;AACD;;AAED,MAAIJ,KAAJ,EAAW;AACTP,IAAAA,GAAG,CAACY,MAAJ,CAAWL,KAAX,EAAkBL,MAAM,CAACW,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACjD,UAAID,GAAJ,EAAS;AACP,eAAOT,GAAG,CAACW,IAAJ,CAAS;AACdC,UAAAA,OAAO,EAAE,KADK;AAEdC,UAAAA,OAAO,EAAE;AAFK,SAAT,CAAP;AAID,OALD,MAKO;AACLd,QAAAA,GAAG,CAACW,OAAJ,GAAcA,OAAd;AACAT,QAAAA,IAAI;AACL;AACF,KAVD;AAWD,GAZD,MAYO;AACL,WAAOD,GAAG,CAACW,IAAJ,CAAS;AACdC,MAAAA,OAAO,EAAE,KADK;AAEdC,MAAAA,OAAO,EAAE;AAFK,KAAT,CAAP;AAID;AACF,CAzBD;;AA2BAC,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,UAAU,EAAEA;AADG,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourcesContent": [
        "let jwt = require('jsonwebtoken');\r\nconst config = require('./config.js');\r\n\r\nlet checkToken = (req, res, next) => {\r\n  let token = req.headers['x-access-token'] || req.headers['authorization']; // Express headers are auto converted to lowercase\r\n  if (token.startsWith('Bearer ')) {\r\n    // Remove Bearer from string\r\n    token = token.slice(7, token.length);\r\n  }\r\n\r\n  if (token) {\r\n    jwt.verify(token, config.secret, (err, decoded) => {\r\n      if (err) {\r\n        return res.json({\r\n          success: false,\r\n          message: 'Token is not valid'\r\n        });\r\n      } else {\r\n        req.decoded = decoded;\r\n        next();\r\n      }\r\n    });\r\n  } else {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Auth token is not supplied'\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  checkToken: checkToken\r\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1550830124188
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\logger.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\logger.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\logger.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\logger.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
        "sourceFileName": "logger.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar winston = require('winston');\n\nvar logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: {\n    service: 'user-service'\n  },\n  transports: [//\n  // - Write to all logs with level `info` and below to `combined.log` \n  // - Write all logs error (and below) to `error.log`.\n  //\n  new winston.transports.File({\n    filename: 'error.log',\n    level: 'error'\n  }), new winston.transports.File({\n    filename: 'combined.log'\n  })]\n}); //\n// If we're not in production then log to the `console` with the format:\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n// \n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJ3aW5zdG9uIiwicmVxdWlyZSIsImxvZ2dlciIsImNyZWF0ZUxvZ2dlciIsImxldmVsIiwiZm9ybWF0IiwianNvbiIsImRlZmF1bHRNZXRhIiwic2VydmljZSIsInRyYW5zcG9ydHMiLCJGaWxlIiwiZmlsZW5hbWUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJhZGQiLCJDb25zb2xlIiwic2ltcGxlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBRUEsSUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUNHLFlBQVIsQ0FBcUI7QUFDaENDLEVBQUFBLEtBQUssRUFBRSxNQUR5QjtBQUVoQ0MsRUFBQUEsTUFBTSxFQUFFTCxPQUFPLENBQUNLLE1BQVIsQ0FBZUMsSUFBZixFQUZ3QjtBQUdoQ0MsRUFBQUEsV0FBVyxFQUFFO0FBQUVDLElBQUFBLE9BQU8sRUFBRTtBQUFYLEdBSG1CO0FBSWhDQyxFQUFBQSxVQUFVLEVBQUUsQ0FDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUlULE9BQU8sQ0FBQ1MsVUFBUixDQUFtQkMsSUFBdkIsQ0FBNEI7QUFBRUMsSUFBQUEsUUFBUSxFQUFFLFdBQVo7QUFBeUJQLElBQUFBLEtBQUssRUFBRTtBQUFoQyxHQUE1QixDQUxVLEVBTVYsSUFBSUosT0FBTyxDQUFDUyxVQUFSLENBQW1CQyxJQUF2QixDQUE0QjtBQUFFQyxJQUFBQSxRQUFRLEVBQUU7QUFBWixHQUE1QixDQU5VO0FBSm9CLENBQXJCLENBQWYsQyxDQWNFO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDWixFQUFBQSxNQUFNLENBQUNhLEdBQVAsQ0FBVyxJQUFJZixPQUFPLENBQUNTLFVBQVIsQ0FBbUJPLE9BQXZCLENBQStCO0FBQ3hDWCxJQUFBQSxNQUFNLEVBQUVMLE9BQU8sQ0FBQ0ssTUFBUixDQUFlWSxNQUFmO0FBRGdDLEdBQS9CLENBQVg7QUFHRCIsInNvdXJjZVJvb3QiOiJFOlxcTk9ERUpTXFxUcmFpbmluZ1xcQWNjZXNzbWVudFRlc3QiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcclxuXHJcbmNvbnN0IGxvZ2dlciA9IHdpbnN0b24uY3JlYXRlTG9nZ2VyKHtcclxuICAgIGxldmVsOiAnaW5mbycsXHJcbiAgICBmb3JtYXQ6IHdpbnN0b24uZm9ybWF0Lmpzb24oKSxcclxuICAgIGRlZmF1bHRNZXRhOiB7IHNlcnZpY2U6ICd1c2VyLXNlcnZpY2UnIH0sXHJcbiAgICB0cmFuc3BvcnRzOiBbXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIC0gV3JpdGUgdG8gYWxsIGxvZ3Mgd2l0aCBsZXZlbCBgaW5mb2AgYW5kIGJlbG93IHRvIGBjb21iaW5lZC5sb2dgIFxyXG4gICAgICAvLyAtIFdyaXRlIGFsbCBsb2dzIGVycm9yIChhbmQgYmVsb3cpIHRvIGBlcnJvci5sb2dgLlxyXG4gICAgICAvL1xyXG4gICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkZpbGUoeyBmaWxlbmFtZTogJ2Vycm9yLmxvZycsIGxldmVsOiAnZXJyb3InIH0pLFxyXG4gICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkZpbGUoeyBmaWxlbmFtZTogJ2NvbWJpbmVkLmxvZycgfSlcclxuICAgIF1cclxuICB9KTtcclxuICAgXHJcbiAgLy9cclxuICAvLyBJZiB3ZSdyZSBub3QgaW4gcHJvZHVjdGlvbiB0aGVuIGxvZyB0byB0aGUgYGNvbnNvbGVgIHdpdGggdGhlIGZvcm1hdDpcclxuICAvLyBgJHtpbmZvLmxldmVsfTogJHtpbmZvLm1lc3NhZ2V9IEpTT04uc3RyaW5naWZ5KHsgLi4ucmVzdCB9KSBgXHJcbiAgLy8gXHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIGxvZ2dlci5hZGQobmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcclxuICAgICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5zaW1wbGUoKVxyXG4gICAgfSkpO1xyXG4gIH0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "logger.js"
      ],
      "names": [
        "winston",
        "require",
        "logger",
        "createLogger",
        "level",
        "format",
        "json",
        "defaultMeta",
        "service",
        "transports",
        "File",
        "filename",
        "process",
        "env",
        "NODE_ENV",
        "add",
        "Console",
        "simple"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAMC,MAAM,GAAGF,OAAO,CAACG,YAAR,CAAqB;AAChCC,EAAAA,KAAK,EAAE,MADyB;AAEhCC,EAAAA,MAAM,EAAEL,OAAO,CAACK,MAAR,CAAeC,IAAf,EAFwB;AAGhCC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAHmB;AAIhCC,EAAAA,UAAU,EAAE,CACV;AACA;AACA;AACA;AACA,MAAIT,OAAO,CAACS,UAAR,CAAmBC,IAAvB,CAA4B;AAAEC,IAAAA,QAAQ,EAAE,WAAZ;AAAyBP,IAAAA,KAAK,EAAE;AAAhC,GAA5B,CALU,EAMV,IAAIJ,OAAO,CAACS,UAAR,CAAmBC,IAAvB,CAA4B;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAA5B,CANU;AAJoB,CAArB,CAAf,C,CAcE;AACA;AACA;AACA;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCZ,EAAAA,MAAM,CAACa,GAAP,CAAW,IAAIf,OAAO,CAACS,UAAR,CAAmBO,OAAvB,CAA+B;AACxCX,IAAAA,MAAM,EAAEL,OAAO,CAACK,MAAR,CAAeY,MAAf;AADgC,GAA/B,CAAX;AAGD",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourcesContent": [
        "let winston = require('winston');\r\n\r\nconst logger = winston.createLogger({\r\n    level: 'info',\r\n    format: winston.format.json(),\r\n    defaultMeta: { service: 'user-service' },\r\n    transports: [\r\n      //\r\n      // - Write to all logs with level `info` and below to `combined.log` \r\n      // - Write all logs error (and below) to `error.log`.\r\n      //\r\n      new winston.transports.File({ filename: 'error.log', level: 'error' }),\r\n      new winston.transports.File({ filename: 'combined.log' })\r\n    ]\r\n  });\r\n   \r\n  //\r\n  // If we're not in production then log to the `console` with the format:\r\n  // `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\r\n  // \r\n  if (process.env.NODE_ENV !== 'production') {\r\n    logger.add(new winston.transports.Console({\r\n      format: winston.format.simple()\r\n    }));\r\n  }"
      ]
    },
    "sourceType": "script",
    "mtime": 1550832508468
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\config.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\config.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\config.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
        "sourceFileName": "config.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nmodule.exports = {\n  secret: 'gtl234%%'\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VjcmV0Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsTUFBTSxFQUFFO0FBREssQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNlY3JldDogJ2d0bDIzNCUlJ1xyXG4gIH07XHJcbiAgIl19",
    "map": {
      "version": 3,
      "sources": [
        "config.js"
      ],
      "names": [
        "module",
        "exports",
        "secret"
      ],
      "mappings": ";;AAAAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAE;AADK,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "sourcesContent": [
        "module.exports = {\r\n    secret: 'gtl234%%'\r\n  };\r\n  "
      ]
    },
    "sourceType": "script",
    "mtime": 1550835603418
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\middleware.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\middleware.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\middleware.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\middleware.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
        "sourceFileName": "middleware.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar jwt = require('jsonwebtoken');\n\nvar config = require('./config.js');\n\nvar checkToken = function checkToken(req, res, next) {\n  var token = req.headers['x-access-token'] || req.headers['authorization']; // Express headers are auto converted to lowercase\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        req.decoded = decoded;\n        next();\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n};\n\nmodule.exports = {\n  checkToken: checkToken\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiand0IiwicmVxdWlyZSIsImNvbmZpZyIsImNoZWNrVG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0IiwidG9rZW4iLCJoZWFkZXJzIiwic3RhcnRzV2l0aCIsInNsaWNlIiwibGVuZ3RoIiwidmVyaWZ5Iiwic2VjcmV0IiwiZXJyIiwiZGVjb2RlZCIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUFqQjs7QUFDQSxJQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUVBLElBQUlFLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEVBQW9CO0FBQ25DLE1BQUlDLEtBQUssR0FBR0gsR0FBRyxDQUFDSSxPQUFKLENBQVksZ0JBQVosS0FBaUNKLEdBQUcsQ0FBQ0ksT0FBSixDQUFZLGVBQVosQ0FBN0MsQ0FEbUMsQ0FDd0M7O0FBQzNFLE1BQUlELEtBQUssQ0FBQ0UsVUFBTixDQUFpQixTQUFqQixDQUFKLEVBQWlDO0FBQy9CO0FBQ0FGLElBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDRyxLQUFOLENBQVksQ0FBWixFQUFlSCxLQUFLLENBQUNJLE1BQXJCLENBQVI7QUFDRDs7QUFFRCxNQUFJSixLQUFKLEVBQVc7QUFDVFAsSUFBQUEsR0FBRyxDQUFDWSxNQUFKLENBQVdMLEtBQVgsRUFBa0JMLE1BQU0sQ0FBQ1csTUFBekIsRUFBaUMsVUFBQ0MsR0FBRCxFQUFNQyxPQUFOLEVBQWtCO0FBQ2pELFVBQUlELEdBQUosRUFBUztBQUNQLGVBQU9ULEdBQUcsQ0FBQ1csSUFBSixDQUFTO0FBQ2RDLFVBQUFBLE9BQU8sRUFBRSxLQURLO0FBRWRDLFVBQUFBLE9BQU8sRUFBRTtBQUZLLFNBQVQsQ0FBUDtBQUlELE9BTEQsTUFLTztBQUNMZCxRQUFBQSxHQUFHLENBQUNXLE9BQUosR0FBY0EsT0FBZDtBQUNBVCxRQUFBQSxJQUFJO0FBQ0w7QUFDRixLQVZEO0FBV0QsR0FaRCxNQVlPO0FBQ0wsV0FBT0QsR0FBRyxDQUFDVyxJQUFKLENBQVM7QUFDZEMsTUFBQUEsT0FBTyxFQUFFLEtBREs7QUFFZEMsTUFBQUEsT0FBTyxFQUFFO0FBRkssS0FBVCxDQUFQO0FBSUQ7QUFDRixDQXpCRDs7QUEyQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmakIsRUFBQUEsVUFBVSxFQUFFQTtBQURHLENBQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdFxcc3JjIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xyXG5jb25zdCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZy5qcycpO1xyXG5cclxubGV0IGNoZWNrVG9rZW4gPSAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICBsZXQgdG9rZW4gPSByZXEuaGVhZGVyc1sneC1hY2Nlc3MtdG9rZW4nXSB8fCByZXEuaGVhZGVyc1snYXV0aG9yaXphdGlvbiddOyAvLyBFeHByZXNzIGhlYWRlcnMgYXJlIGF1dG8gY29udmVydGVkIHRvIGxvd2VyY2FzZVxyXG4gIGlmICh0b2tlbi5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcclxuICAgIC8vIFJlbW92ZSBCZWFyZXIgZnJvbSBzdHJpbmdcclxuICAgIHRva2VuID0gdG9rZW4uc2xpY2UoNywgdG9rZW4ubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIGlmICh0b2tlbikge1xyXG4gICAgand0LnZlcmlmeSh0b2tlbiwgY29uZmlnLnNlY3JldCwgKGVyciwgZGVjb2RlZCkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHtcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ1Rva2VuIGlzIG5vdCB2YWxpZCdcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXEuZGVjb2RlZCA9IGRlY29kZWQ7XHJcbiAgICAgICAgbmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHJlcy5qc29uKHtcclxuICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6ICdBdXRoIHRva2VuIGlzIG5vdCBzdXBwbGllZCdcclxuICAgIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNoZWNrVG9rZW46IGNoZWNrVG9rZW5cclxufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "middleware.js"
      ],
      "names": [
        "jwt",
        "require",
        "config",
        "checkToken",
        "req",
        "res",
        "next",
        "token",
        "headers",
        "startsWith",
        "slice",
        "length",
        "verify",
        "secret",
        "err",
        "decoded",
        "json",
        "success",
        "message",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AAEA,IAAIE,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAIC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,KAAiCJ,GAAG,CAACI,OAAJ,CAAY,eAAZ,CAA7C,CADmC,CACwC;;AAC3E,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC/B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACI,MAArB,CAAR;AACD;;AAED,MAAIJ,KAAJ,EAAW;AACTP,IAAAA,GAAG,CAACY,MAAJ,CAAWL,KAAX,EAAkBL,MAAM,CAACW,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACjD,UAAID,GAAJ,EAAS;AACP,eAAOT,GAAG,CAACW,IAAJ,CAAS;AACdC,UAAAA,OAAO,EAAE,KADK;AAEdC,UAAAA,OAAO,EAAE;AAFK,SAAT,CAAP;AAID,OALD,MAKO;AACLd,QAAAA,GAAG,CAACW,OAAJ,GAAcA,OAAd;AACAT,QAAAA,IAAI;AACL;AACF,KAVD;AAWD,GAZD,MAYO;AACL,WAAOD,GAAG,CAACW,IAAJ,CAAS;AACdC,MAAAA,OAAO,EAAE,KADK;AAEdC,MAAAA,OAAO,EAAE;AAFK,KAAT,CAAP;AAID;AACF,CAzBD;;AA2BAC,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,UAAU,EAAEA;AADG,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "sourcesContent": [
        "let jwt = require('jsonwebtoken');\r\nconst config = require('./config.js');\r\n\r\nlet checkToken = (req, res, next) => {\r\n  let token = req.headers['x-access-token'] || req.headers['authorization']; // Express headers are auto converted to lowercase\r\n  if (token.startsWith('Bearer ')) {\r\n    // Remove Bearer from string\r\n    token = token.slice(7, token.length);\r\n  }\r\n\r\n  if (token) {\r\n    jwt.verify(token, config.secret, (err, decoded) => {\r\n      if (err) {\r\n        return res.json({\r\n          success: false,\r\n          message: 'Token is not valid'\r\n        });\r\n      } else {\r\n        req.decoded = decoded;\r\n        next();\r\n      }\r\n    });\r\n  } else {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Auth token is not supplied'\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  checkToken: checkToken\r\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1550835609646
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\logger.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\logger.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\logger.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\logger.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
        "sourceFileName": "logger.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar winston = require('winston');\n\nvar logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: {\n    service: 'user-service'\n  },\n  transports: [//\n  // - Write to all logs with level `info` and below to `combined.log` \n  // - Write all logs error (and below) to `error.log`.\n  //\n  new winston.transports.File({\n    filename: 'error.log',\n    level: 'error'\n  }), new winston.transports.File({\n    filename: 'combined.log'\n  })]\n}); //\n// If we're not in production then log to the `console` with the format:\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n// \n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\nmodule.exports = logger;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJ3aW5zdG9uIiwicmVxdWlyZSIsImxvZ2dlciIsImNyZWF0ZUxvZ2dlciIsImxldmVsIiwiZm9ybWF0IiwianNvbiIsImRlZmF1bHRNZXRhIiwic2VydmljZSIsInRyYW5zcG9ydHMiLCJGaWxlIiwiZmlsZW5hbWUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJhZGQiLCJDb25zb2xlIiwic2ltcGxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUVBLElBQU1DLE1BQU0sR0FBR0YsT0FBTyxDQUFDRyxZQUFSLENBQXFCO0FBQ2hDQyxFQUFBQSxLQUFLLEVBQUUsTUFEeUI7QUFFaENDLEVBQUFBLE1BQU0sRUFBRUwsT0FBTyxDQUFDSyxNQUFSLENBQWVDLElBQWYsRUFGd0I7QUFHaENDLEVBQUFBLFdBQVcsRUFBRTtBQUFFQyxJQUFBQSxPQUFPLEVBQUU7QUFBWCxHQUhtQjtBQUloQ0MsRUFBQUEsVUFBVSxFQUFFLENBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFJVCxPQUFPLENBQUNTLFVBQVIsQ0FBbUJDLElBQXZCLENBQTRCO0FBQUVDLElBQUFBLFFBQVEsRUFBRSxXQUFaO0FBQXlCUCxJQUFBQSxLQUFLLEVBQUU7QUFBaEMsR0FBNUIsQ0FMVSxFQU1WLElBQUlKLE9BQU8sQ0FBQ1MsVUFBUixDQUFtQkMsSUFBdkIsQ0FBNEI7QUFBRUMsSUFBQUEsUUFBUSxFQUFFO0FBQVosR0FBNUIsQ0FOVTtBQUpvQixDQUFyQixDQUFmLEMsQ0FjRTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6Q1osRUFBQUEsTUFBTSxDQUFDYSxHQUFQLENBQVcsSUFBSWYsT0FBTyxDQUFDUyxVQUFSLENBQW1CTyxPQUF2QixDQUErQjtBQUN4Q1gsSUFBQUEsTUFBTSxFQUFFTCxPQUFPLENBQUNLLE1BQVIsQ0FBZVksTUFBZjtBQURnQyxHQUEvQixDQUFYO0FBR0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLE1BQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdFxcc3JjIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHdpbnN0b24gPSByZXF1aXJlKCd3aW5zdG9uJyk7XHJcblxyXG5jb25zdCBsb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcih7XHJcbiAgICBsZXZlbDogJ2luZm8nLFxyXG4gICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5qc29uKCksXHJcbiAgICBkZWZhdWx0TWV0YTogeyBzZXJ2aWNlOiAndXNlci1zZXJ2aWNlJyB9LFxyXG4gICAgdHJhbnNwb3J0czogW1xyXG4gICAgICAvL1xyXG4gICAgICAvLyAtIFdyaXRlIHRvIGFsbCBsb2dzIHdpdGggbGV2ZWwgYGluZm9gIGFuZCBiZWxvdyB0byBgY29tYmluZWQubG9nYCBcclxuICAgICAgLy8gLSBXcml0ZSBhbGwgbG9ncyBlcnJvciAoYW5kIGJlbG93KSB0byBgZXJyb3IubG9nYC5cclxuICAgICAgLy9cclxuICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5GaWxlKHsgZmlsZW5hbWU6ICdlcnJvci5sb2cnLCBsZXZlbDogJ2Vycm9yJyB9KSxcclxuICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5GaWxlKHsgZmlsZW5hbWU6ICdjb21iaW5lZC5sb2cnIH0pXHJcbiAgICBdXHJcbiAgfSk7XHJcbiAgIFxyXG4gIC8vXHJcbiAgLy8gSWYgd2UncmUgbm90IGluIHByb2R1Y3Rpb24gdGhlbiBsb2cgdG8gdGhlIGBjb25zb2xlYCB3aXRoIHRoZSBmb3JtYXQ6XHJcbiAgLy8gYCR7aW5mby5sZXZlbH06ICR7aW5mby5tZXNzYWdlfSBKU09OLnN0cmluZ2lmeSh7IC4uLnJlc3QgfSkgYFxyXG4gIC8vIFxyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICBsb2dnZXIuYWRkKG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XHJcbiAgICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuc2ltcGxlKClcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIG1vZHVsZS5leHBvcnRzID0gbG9nZ2VyOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "logger.js"
      ],
      "names": [
        "winston",
        "require",
        "logger",
        "createLogger",
        "level",
        "format",
        "json",
        "defaultMeta",
        "service",
        "transports",
        "File",
        "filename",
        "process",
        "env",
        "NODE_ENV",
        "add",
        "Console",
        "simple",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAMC,MAAM,GAAGF,OAAO,CAACG,YAAR,CAAqB;AAChCC,EAAAA,KAAK,EAAE,MADyB;AAEhCC,EAAAA,MAAM,EAAEL,OAAO,CAACK,MAAR,CAAeC,IAAf,EAFwB;AAGhCC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAHmB;AAIhCC,EAAAA,UAAU,EAAE,CACV;AACA;AACA;AACA;AACA,MAAIT,OAAO,CAACS,UAAR,CAAmBC,IAAvB,CAA4B;AAAEC,IAAAA,QAAQ,EAAE,WAAZ;AAAyBP,IAAAA,KAAK,EAAE;AAAhC,GAA5B,CALU,EAMV,IAAIJ,OAAO,CAACS,UAAR,CAAmBC,IAAvB,CAA4B;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAA5B,CANU;AAJoB,CAArB,CAAf,C,CAcE;AACA;AACA;AACA;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCZ,EAAAA,MAAM,CAACa,GAAP,CAAW,IAAIf,OAAO,CAACS,UAAR,CAAmBO,OAAvB,CAA+B;AACxCX,IAAAA,MAAM,EAAEL,OAAO,CAACK,MAAR,CAAeY,MAAf;AADgC,GAA/B,CAAX;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiBjB,MAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "sourcesContent": [
        "let winston = require('winston');\r\n\r\nconst logger = winston.createLogger({\r\n    level: 'info',\r\n    format: winston.format.json(),\r\n    defaultMeta: { service: 'user-service' },\r\n    transports: [\r\n      //\r\n      // - Write to all logs with level `info` and below to `combined.log` \r\n      // - Write all logs error (and below) to `error.log`.\r\n      //\r\n      new winston.transports.File({ filename: 'error.log', level: 'error' }),\r\n      new winston.transports.File({ filename: 'combined.log' })\r\n    ]\r\n  });\r\n   \r\n  //\r\n  // If we're not in production then log to the `console` with the format:\r\n  // `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\r\n  // \r\n  if (process.env.NODE_ENV !== 'production') {\r\n    logger.add(new winston.transports.Console({\r\n      format: winston.format.simple()\r\n    }));\r\n  }\r\n\r\n  module.exports = logger;"
      ]
    },
    "sourceType": "script",
    "mtime": 1551187451307
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\\\\blog.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\blog.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\blog.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\blog.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
        "sourceFileName": "blog.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar BlogModel = require('../models/blog.model');\n\nvar jwt = require('jsonwebtoken');\n\nvar config = require('../config');\n\nvar router = express.Router();\n\nvar logger = require(\"../logger\"); // Create a new blog - POST API\n\n\nrouter.post('/blog/publish', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        var userEmail = decoded.email; // req.json({author : decoded.Object.})\n\n        var model = new BlogModel(req.body);\n        model.author = userEmail;\n        model.save().then(function (doc) {\n          if (!doc || doc.length === 0) {\n            return res.status(500).send(doc);\n          }\n\n          res.status(201).json({\n            status: true,\n            message: 'Successfully published blog post.',\n            blog: model\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Update blog - POST API\n\nrouter.put('/blog/update', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        var model = new BlogModel(req.body);\n        BlogModel.findOneAndUpdate({\n          url: model.url,\n          author: model.author\n        }, req.body, {\n          new: true\n        }).then(function (doc) {\n          if (!doc || doc.length === 0) {\n            return res.status(500).json({\n              status: false,\n              message: \"Invalid URL!\"\n            });\n          }\n\n          res.status(201).json({\n            status: true,\n            message: 'Successfully updated blog post.',\n            blog: model\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Get blogs by author - GET API\n\nrouter.get('/blog/author', function (req, res) {\n  // if (Object.keys(req.body).length === 0) {\n  //     return res.status(400).send('Request body is missing!');\n  // }\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        BlogModel.find({\n          author: decoded.email\n        }).then(function (doc) {\n          res.status(201).json({\n            status: true,\n            blogs: doc\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Get all blogs - GET API\n\nrouter.get('/blog/all', function (req, res) {\n  // if (Object.keys(req.body).length === 0) {\n  //     return res.status(400).send('Request body is missing!');\n  // }\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        BlogModel.find().then(function (doc) {\n          res.status(201).json({\n            status: true,\n            blogs: doc\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Delete blog - DELETE API\n\nrouter.delete('/blog', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        BlogModel.deleteOne({\n          url: req.body.url\n        }).then(function (doc) {\n          res.status(201).json({\n            message: 'Successfully deleted blog post.',\n            status: true\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "blog.js"
      ],
      "names": [
        "express",
        "require",
        "BlogModel",
        "jwt",
        "config",
        "router",
        "Router",
        "logger",
        "post",
        "req",
        "res",
        "Object",
        "keys",
        "body",
        "length",
        "status",
        "send",
        "token",
        "headers",
        "startsWith",
        "slice",
        "verify",
        "secret",
        "err",
        "decoded",
        "json",
        "success",
        "message",
        "userEmail",
        "email",
        "model",
        "author",
        "save",
        "then",
        "doc",
        "blog",
        "catch",
        "log",
        "level",
        "put",
        "findOneAndUpdate",
        "url",
        "new",
        "get",
        "find",
        "blogs",
        "delete",
        "deleteOne",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAII,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAb;;AACA,IAAIC,MAAM,GAAGN,OAAO,CAAC,WAAD,CAApB,C,CAEA;;;AACAI,MAAM,CAACG,IAAP,CAAY,eAAZ,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACH,YAAIC,SAAS,GAAGJ,OAAO,CAACK,KAAxB,CADG,CAEH;;AACA,YAAIC,KAAK,GAAG,IAAI5B,SAAJ,CAAcO,GAAG,CAACI,IAAlB,CAAZ;AACAiB,QAAAA,KAAK,CAACC,MAAN,GAAeH,SAAf;AACAE,QAAAA,KAAK,CAACE,IAAN,GACKC,IADL,CACU,UAAAC,GAAG,EAAI;AACT,cAAI,CAACA,GAAD,IAAQA,GAAG,CAACpB,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,mBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBkB,GAArB,CAAP;AACH;;AACDxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjBY,YAAAA,OAAO,EAAE,mCAFQ;AAGjBQ,YAAAA,IAAI,EAAEL;AAHW,WAArB;AAKH,SAVL,EAWKM,KAXL,CAWW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAhBL;AAiBH;AACJ,KA7BD;AA8BH,GA/BD,MA+BO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CA/CD,E,CAiDA;;AACAtB,MAAM,CAACkC,GAAP,CAAW,cAAX,EAA2B,UAAC9B,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACH,YAAIG,KAAK,GAAG,IAAI5B,SAAJ,CAAcO,GAAG,CAACI,IAAlB,CAAZ;AACAX,QAAAA,SAAS,CAACsC,gBAAV,CAA2B;AACvBC,UAAAA,GAAG,EAAEX,KAAK,CAACW,GADY;AAEvBV,UAAAA,MAAM,EAAED,KAAK,CAACC;AAFS,SAA3B,EAGGtB,GAAG,CAACI,IAHP,EAGa;AAAE6B,UAAAA,GAAG,EAAE;AAAP,SAHb,EAIKT,IAJL,CAIU,UAAAC,GAAG,EAAI;AACT,cAAI,CAACA,GAAD,IAAQA,GAAG,CAACpB,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,mBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACxBV,cAAAA,MAAM,EAAE,KADgB;AAExBY,cAAAA,OAAO,EAAG;AAFc,aAArB,CAAP;AAIH;;AACDjB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjBY,YAAAA,OAAO,EAAE,iCAFQ;AAGjBQ,YAAAA,IAAI,EAAEL;AAHW,WAArB;AAKH,SAhBL,EAiBKM,KAjBL,CAiBW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAtBL;AAuBH;AACJ,KAhCD;AAiCH,GAlCD,MAkCO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAlDD,E,CAoDA;;AACAtB,MAAM,CAACsC,GAAP,CAAW,cAAX,EAA2B,UAAClC,GAAD,EAAMC,GAAN,EAAc;AACrC;AACA;AACA;AACA,MAAIO,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACHzB,QAAAA,SAAS,CAAC0C,IAAV,CAAe;AACXb,UAAAA,MAAM,EAAEP,OAAO,CAACK;AADL,SAAf,EAGKI,IAHL,CAGU,UAAAC,GAAG,EAAI;AACTxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjB8B,YAAAA,KAAK,EAAEX;AAFU,WAArB;AAIH,SARL,EASKE,KATL,CASW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAdL;AAeH;AACJ,KAvBD;AAwBH,GAzBD,MAyBO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAzCD,E,CA2CA;;AACAtB,MAAM,CAACsC,GAAP,CAAW,WAAX,EAAwB,UAAClC,GAAD,EAAMC,GAAN,EAAc;AAClC;AACA;AACA;AACA,MAAIO,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACHzB,QAAAA,SAAS,CAAC0C,IAAV,GACKX,IADL,CACU,UAAAC,GAAG,EAAI;AACTxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjB8B,YAAAA,KAAK,EAAEX;AAFU,WAArB;AAIH,SANL,EAOKE,KAPL,CAOW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAZL;AAaH;AACJ,KArBD;AAsBH,GAvBD,MAuBO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAvCD,E,CAyCA;;AACAtB,MAAM,CAACyC,MAAP,CAAc,OAAd,EAAuB,UAACrC,GAAD,EAAMC,GAAN,EAAc;AACjC,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACHzB,QAAAA,SAAS,CAAC6C,SAAV,CAAoB;AAChBN,UAAAA,GAAG,EAAEhC,GAAG,CAACI,IAAJ,CAAS4B;AADE,SAApB,EAGKR,IAHL,CAGU,UAAAC,GAAG,EAAI;AACTxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBE,YAAAA,OAAO,EAAE,iCADQ;AAEjBZ,YAAAA,MAAM,EAAE;AAFS,WAArB;AAIH,SARL,EASKqB,KATL,CASW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAdL;AAeH;AACJ,KAvBD;AAwBH,GAzBD,MAyBO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAzCD;AA2CAqB,MAAM,CAACC,OAAP,GAAiB5C,MAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "sourcesContent": [
        "let express = require('express');\r\nlet BlogModel = require('../models/blog.model');\r\nlet jwt = require('jsonwebtoken');\r\nconst config = require('../config');\r\nlet router = express.Router();\r\nlet logger = require(\"../logger\");\r\n\r\n// Create a new blog - POST API\r\nrouter.post('/blog/publish', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                var userEmail = decoded.email;\r\n                // req.json({author : decoded.Object.})\r\n                let model = new BlogModel(req.body);\r\n                model.author = userEmail;\r\n                model.save()\r\n                    .then(doc => {\r\n                        if (!doc || doc.length === 0) {\r\n                            return res.status(500).send(doc);\r\n                        }\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            message: 'Successfully published blog post.',\r\n                            blog: model\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Update blog - POST API\r\nrouter.put('/blog/update', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                let model = new BlogModel(req.body);\r\n                BlogModel.findOneAndUpdate({\r\n                    url: model.url,\r\n                    author: model.author\r\n                }, req.body, { new: true })\r\n                    .then(doc => {\r\n                        if (!doc || doc.length === 0) {\r\n                            return res.status(500).json({\r\n                                status: false,\r\n                                message : \"Invalid URL!\"\r\n                            });\r\n                        }\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            message: 'Successfully updated blog post.',\r\n                            blog: model\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Get blogs by author - GET API\r\nrouter.get('/blog/author', (req, res) => {\r\n    // if (Object.keys(req.body).length === 0) {\r\n    //     return res.status(400).send('Request body is missing!');\r\n    // }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                BlogModel.find({\r\n                    author: decoded.email\r\n                })\r\n                    .then(doc => {\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            blogs: doc\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Get all blogs - GET API\r\nrouter.get('/blog/all', (req, res) => {\r\n    // if (Object.keys(req.body).length === 0) {\r\n    //     return res.status(400).send('Request body is missing!');\r\n    // }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                BlogModel.find()\r\n                    .then(doc => {\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            blogs: doc\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Delete blog - DELETE API\r\nrouter.delete('/blog', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                BlogModel.deleteOne({\r\n                    url: req.body.url\r\n                })\r\n                    .then(doc => {\r\n                        res.status(201).json({\r\n                            message: 'Successfully deleted blog post.',\r\n                            status: true\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "script",
    "mtime": 1551188261781
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\blog.model.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\blog.model.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\blog.model.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\blog.model.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "blog.model.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar mongoose = require('mongoose');\n\nvar BlogSchema = mongoose.Schema({\n  author: {\n    type: String,\n    required: false\n  },\n  url: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  title: {\n    type: String,\n    required: true\n  },\n  body: {\n    type: String,\n    required: true\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  },\n  tags: [String],\n  updated: {\n    type: Date\n  }\n});\nmodule.exports = mongoose.model('blog', BlogSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2cubW9kZWwuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiQmxvZ1NjaGVtYSIsIlNjaGVtYSIsImF1dGhvciIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsInVybCIsInVuaXF1ZSIsInRpdGxlIiwiYm9keSIsImRhdGUiLCJEYXRlIiwiZGVmYXVsdCIsIm5vdyIsInRhZ3MiLCJ1cGRhdGVkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZGVsIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHRixRQUFRLENBQUNHLE1BQVQsQ0FBZ0I7QUFDN0JDLEVBQUFBLE1BQU0sRUFBRTtBQUNKQyxJQUFBQSxJQUFJLEVBQUVDLE1BREY7QUFFSkMsSUFBQUEsUUFBUSxFQUFFO0FBRk4sR0FEcUI7QUFLN0JDLEVBQUFBLEdBQUcsRUFBRTtBQUNESCxJQUFBQSxJQUFJLEVBQUVDLE1BREw7QUFFREMsSUFBQUEsUUFBUSxFQUFFLElBRlQ7QUFHREUsSUFBQUEsTUFBTSxFQUFFO0FBSFAsR0FMd0I7QUFVM0JDLEVBQUFBLEtBQUssRUFBRTtBQUNMTCxJQUFBQSxJQUFJLEVBQUVDLE1BREQ7QUFFTEMsSUFBQUEsUUFBUSxFQUFFO0FBRkwsR0FWb0I7QUFjM0JJLEVBQUFBLElBQUksRUFBRTtBQUNKTixJQUFBQSxJQUFJLEVBQUVDLE1BREY7QUFFSkMsSUFBQUEsUUFBUSxFQUFFO0FBRk4sR0FkcUI7QUFrQjNCSyxFQUFBQSxJQUFJLEVBQUU7QUFDSlAsSUFBQUEsSUFBSSxFQUFFUSxJQURGO0FBRUpDLElBQUFBLE9BQU8sRUFBRUQsSUFBSSxDQUFDRTtBQUZWLEdBbEJxQjtBQXNCM0JDLEVBQUFBLElBQUksRUFBRSxDQUFDVixNQUFELENBdEJxQjtBQXVCM0JXLEVBQUFBLE9BQU8sRUFBRTtBQUNQWixJQUFBQSxJQUFJLEVBQUVRO0FBREM7QUF2QmtCLENBQWhCLENBQWpCO0FBNEJBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixRQUFRLENBQUNvQixLQUFULENBQWUsTUFBZixFQUF1QmxCLFVBQXZCLENBQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdFxcc3JjXFxtb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5cclxubGV0IEJsb2dTY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgYXV0aG9yOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHVybDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICB1bmlxdWU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgdGl0bGU6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgYm9keToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBkYXRlOiB7XHJcbiAgICAgICAgdHlwZTogRGF0ZSxcclxuICAgICAgICBkZWZhdWx0OiBEYXRlLm5vd1xyXG4gICAgICB9LFxyXG4gICAgICB0YWdzOiBbU3RyaW5nXSxcclxuICAgICAgdXBkYXRlZDoge1xyXG4gICAgICAgIHR5cGU6IERhdGVcclxuICAgICAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2UubW9kZWwoJ2Jsb2cnLCBCbG9nU2NoZW1hKTtcclxuXHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "blog.model.js"
      ],
      "names": [
        "mongoose",
        "require",
        "BlogSchema",
        "Schema",
        "author",
        "type",
        "String",
        "required",
        "url",
        "unique",
        "title",
        "body",
        "date",
        "Date",
        "default",
        "now",
        "tags",
        "updated",
        "module",
        "exports",
        "model"
      ],
      "mappings": ";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,UAAU,GAAGF,QAAQ,CAACG,MAAT,CAAgB;AAC7BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GADqB;AAK7BC,EAAAA,GAAG,EAAE;AACDH,IAAAA,IAAI,EAAEC,MADL;AAEDC,IAAAA,QAAQ,EAAE,IAFT;AAGDE,IAAAA,MAAM,EAAE;AAHP,GALwB;AAU3BC,EAAAA,KAAK,EAAE;AACLL,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAVoB;AAc3BI,EAAAA,IAAI,EAAE;AACJN,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAdqB;AAkB3BK,EAAAA,IAAI,EAAE;AACJP,IAAAA,IAAI,EAAEQ,IADF;AAEJC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAFV,GAlBqB;AAsB3BC,EAAAA,IAAI,EAAE,CAACV,MAAD,CAtBqB;AAuB3BW,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IAAI,EAAEQ;AADC;AAvBkB,CAAhB,CAAjB;AA4BAK,MAAM,CAACC,OAAP,GAAiBnB,QAAQ,CAACoB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\r\n\r\nlet BlogSchema = mongoose.Schema({\r\n    author: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    url: {\r\n        type: String,\r\n        required: true,\r\n        unique: true\r\n      },\r\n      title: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      body: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      date: {\r\n        type: Date,\r\n        default: Date.now\r\n      },\r\n      tags: [String],\r\n      updated: {\r\n        type: Date\r\n      }\r\n});\r\n\r\nmodule.exports = mongoose.model('blog', BlogSchema);\r\n\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550838064738
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\connection.string.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\connection.string.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\connection.string.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\connection.string.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
        "sourceFileName": "connection.string.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar connection = {\n  port: process.env.PORT || 3000,\n  db: 'mongodb://localhost:27017/test'\n};\nmodule.exports = connection;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3Rpb24uc3RyaW5nLmpzIl0sIm5hbWVzIjpbImNvbm5lY3Rpb24iLCJwb3J0IiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJkYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsVUFBVSxHQUFHO0FBQ2ZDLEVBQUFBLElBQUksRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQVosSUFBb0IsSUFEWDtBQUVmQyxFQUFBQSxFQUFFLEVBQUU7QUFGVyxDQUFuQjtBQUlFQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLFVBQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdFxcc3JjIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29ubmVjdGlvbiA9IHtcclxuICAgIHBvcnQ6IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCxcclxuICAgIGRiOiAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy90ZXN0J1xyXG4gIH1cclxuICBtb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3Rpb247Il19",
    "map": {
      "version": 3,
      "sources": [
        "connection.string.js"
      ],
      "names": [
        "connection",
        "port",
        "process",
        "env",
        "PORT",
        "db",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAMA,UAAU,GAAG;AACfC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IADX;AAEfC,EAAAA,EAAE,EAAE;AAFW,CAAnB;AAIEC,MAAM,CAACC,OAAP,GAAiBP,UAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src",
      "sourcesContent": [
        "const connection = {\r\n    port: process.env.PORT || 3000,\r\n    db: 'mongodb://localhost:27017/test'\r\n  }\r\n  module.exports = connection;"
      ]
    },
    "sourceType": "script",
    "mtime": 1550837161323
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\\\\comment.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\comment.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\comment.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\comment.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
        "sourceFileName": "comment.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar CommentModel = require('../models/comment.model');\n\nvar jwt = require('jsonwebtoken');\n\nvar config = require('../config');\n\nvar router = express.Router();\n\nvar logger = require(\"../logger\"); // Post new comment - POST API\n\n\nrouter.post('/comment/create', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        var userEmail = decoded.email; // req.json({author : decoded.Object.})\n\n        var model = new CommentModel(req.body);\n        model.userName = userEmail;\n        model.save().then(function (doc) {\n          if (!doc || doc.length === 0) {\n            return res.status(500).send(doc);\n          }\n\n          res.status(201).json({\n            status: true,\n            message: 'Successfully posted comment.',\n            blog: model\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Update comment - POST API\n\nrouter.put('/comment/update', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        var model = new CommentModel(req.body);\n        CommentModel.findOneAndUpdate({\n          _id: model._id\n        }, req.body, {\n          new: true\n        }).then(function (doc) {\n          if (!doc || doc.length === 0) {\n            return res.status(500).json({\n              status: false,\n              message: \"Invalid ID!\"\n            });\n          }\n\n          res.status(201).json({\n            status: true,\n            message: 'Successfully updated comment.',\n            comment: model\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Get comments of blog - GET API\n\nrouter.get('/comment/blog', function (req, res) {\n  // if (Object.keys(req.body).length === 0) {\n  //     return res.status(400).send('Request body is missing!');\n  // }\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        CommentModel.find({\n          blogUrl: req.body.blogUrl\n        }).then(function (doc) {\n          res.status(201).json({\n            status: true,\n            comments: doc\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n}); // Delete comment - DELETE API\n\nrouter.delete('/comment', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        CommentModel.deleteOne({\n          _id: req.body._id\n        }).then(function (doc) {\n          res.status(201).json({\n            message: 'Successfully deleted comment.',\n            status: true\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "comment.js"
      ],
      "names": [
        "express",
        "require",
        "CommentModel",
        "jwt",
        "config",
        "router",
        "Router",
        "logger",
        "post",
        "req",
        "res",
        "Object",
        "keys",
        "body",
        "length",
        "status",
        "send",
        "token",
        "headers",
        "startsWith",
        "slice",
        "verify",
        "secret",
        "err",
        "decoded",
        "json",
        "success",
        "message",
        "userEmail",
        "email",
        "model",
        "userName",
        "save",
        "then",
        "doc",
        "blog",
        "catch",
        "log",
        "level",
        "put",
        "findOneAndUpdate",
        "_id",
        "new",
        "comment",
        "get",
        "find",
        "blogUrl",
        "comments",
        "delete",
        "deleteOne",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAII,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAb;;AACA,IAAIC,MAAM,GAAGN,OAAO,CAAC,WAAD,CAApB,C,CAEA;;;AACAI,MAAM,CAACG,IAAP,CAAY,iBAAZ,EAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACH,YAAIC,SAAS,GAAGJ,OAAO,CAACK,KAAxB,CADG,CAEH;;AACA,YAAIC,KAAK,GAAG,IAAI5B,YAAJ,CAAiBO,GAAG,CAACI,IAArB,CAAZ;AACAiB,QAAAA,KAAK,CAACC,QAAN,GAAiBH,SAAjB;AACAE,QAAAA,KAAK,CAACE,IAAN,GACKC,IADL,CACU,UAAAC,GAAG,EAAI;AACT,cAAI,CAACA,GAAD,IAAQA,GAAG,CAACpB,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,mBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBkB,GAArB,CAAP;AACH;;AACDxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjBY,YAAAA,OAAO,EAAE,8BAFQ;AAGjBQ,YAAAA,IAAI,EAAEL;AAHW,WAArB;AAKH,SAVL,EAWKM,KAXL,CAWW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAhBL;AAiBH;AACJ,KA7BD;AA8BH,GA/BD,MA+BO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CA/CD,E,CAiDA;;AACAtB,MAAM,CAACkC,GAAP,CAAW,iBAAX,EAA8B,UAAC9B,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACH,YAAIG,KAAK,GAAG,IAAI5B,YAAJ,CAAiBO,GAAG,CAACI,IAArB,CAAZ;AACAX,QAAAA,YAAY,CAACsC,gBAAb,CAA8B;AAC1BC,UAAAA,GAAG,EAAEX,KAAK,CAACW;AADe,SAA9B,EAEGhC,GAAG,CAACI,IAFP,EAEa;AAAE6B,UAAAA,GAAG,EAAE;AAAP,SAFb,EAGKT,IAHL,CAGU,UAAAC,GAAG,EAAI;AACT,cAAI,CAACA,GAAD,IAAQA,GAAG,CAACpB,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,mBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACxBV,cAAAA,MAAM,EAAE,KADgB;AAExBY,cAAAA,OAAO,EAAE;AAFe,aAArB,CAAP;AAIH;;AACDjB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjBY,YAAAA,OAAO,EAAE,+BAFQ;AAGjBgB,YAAAA,OAAO,EAAEb;AAHQ,WAArB;AAKH,SAfL,EAgBKM,KAhBL,CAgBW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SArBL;AAsBH;AACJ,KA/BD;AAgCH,GAjCD,MAiCO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAjDD,E,CAmDA;;AACAtB,MAAM,CAACuC,GAAP,CAAW,eAAX,EAA4B,UAACnC,GAAD,EAAMC,GAAN,EAAc;AACtC;AACA;AACA;AACA,MAAIO,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACHzB,QAAAA,YAAY,CAAC2C,IAAb,CAAkB;AACdC,UAAAA,OAAO,EAAErC,GAAG,CAACI,IAAJ,CAASiC;AADJ,SAAlB,EAGKb,IAHL,CAGU,UAAAC,GAAG,EAAI;AACTxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjBgC,YAAAA,QAAQ,EAAEb;AAFO,WAArB;AAIH,SARL,EASKE,KATL,CASW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAdL;AAeH;AACJ,KAvBD;AAwBH,GAzBD,MAyBO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAzCD,E,CA2CA;;AACAtB,MAAM,CAAC2C,MAAP,CAAc,UAAd,EAA0B,UAACvC,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACHzB,QAAAA,YAAY,CAAC+C,SAAb,CAAuB;AACnBR,UAAAA,GAAG,EAAEhC,GAAG,CAACI,IAAJ,CAAS4B;AADK,SAAvB,EAGKR,IAHL,CAGU,UAAAC,GAAG,EAAI;AACTxB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBE,YAAAA,OAAO,EAAE,+BADQ;AAEjBZ,YAAAA,MAAM,EAAE;AAFS,WAArB;AAIH,SARL,EASKqB,KATL,CASW,UAAAb,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC8B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPX,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SAdL;AAeH;AACJ,KAvBD;AAwBH,GAzBD,MAyBO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CAzCD;AA2CAuB,MAAM,CAACC,OAAP,GAAiB9C,MAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "sourcesContent": [
        "let express = require('express');\r\nlet CommentModel = require('../models/comment.model');\r\nlet jwt = require('jsonwebtoken');\r\nconst config = require('../config');\r\nlet router = express.Router();\r\nlet logger = require(\"../logger\");\r\n\r\n// Post new comment - POST API\r\nrouter.post('/comment/create', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                var userEmail = decoded.email;\r\n                // req.json({author : decoded.Object.})\r\n                let model = new CommentModel(req.body);\r\n                model.userName = userEmail;\r\n                model.save()\r\n                    .then(doc => {\r\n                        if (!doc || doc.length === 0) {\r\n                            return res.status(500).send(doc);\r\n                        }\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            message: 'Successfully posted comment.',\r\n                            blog: model\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Update comment - POST API\r\nrouter.put('/comment/update', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                let model = new CommentModel(req.body);\r\n                CommentModel.findOneAndUpdate({\r\n                    _id: model._id\r\n                }, req.body, { new: true })\r\n                    .then(doc => {\r\n                        if (!doc || doc.length === 0) {\r\n                            return res.status(500).json({\r\n                                status: false,\r\n                                message: \"Invalid ID!\"\r\n                            });\r\n                        }\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            message: 'Successfully updated comment.',\r\n                            comment: model\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Get comments of blog - GET API\r\nrouter.get('/comment/blog', (req, res) => {\r\n    // if (Object.keys(req.body).length === 0) {\r\n    //     return res.status(400).send('Request body is missing!');\r\n    // }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                CommentModel.find({\r\n                    blogUrl: req.body.blogUrl\r\n                })\r\n                    .then(doc => {\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            comments: doc\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\n// Delete comment - DELETE API\r\nrouter.delete('/comment', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                CommentModel.deleteOne({\r\n                    _id: req.body._id\r\n                })\r\n                    .then(doc => {\r\n                        res.status(201).json({\r\n                            message: 'Successfully deleted comment.',\r\n                            status: true\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "script",
    "mtime": 1551187709806
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\comment.model.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\comment.model.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\comment.model.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\comment.model.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "comment.model.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar mongoose = require('mongoose');\n\nvar CommentSchema = mongoose.Schema({\n  userName: {\n    type: String,\n    required: false\n  },\n  userEmail: {\n    type: String,\n    required: false\n  },\n  comment: {\n    type: String,\n    required: true\n  },\n  blogUrl: {\n    type: String,\n    required: true\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  },\n  updated: {\n    type: Date\n  }\n});\nmodule.exports = mongoose.model('comment', CommentSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1lbnQubW9kZWwuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiQ29tbWVudFNjaGVtYSIsIlNjaGVtYSIsInVzZXJOYW1lIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidXNlckVtYWlsIiwiY29tbWVudCIsImJsb2dVcmwiLCJkYXRlIiwiRGF0ZSIsImRlZmF1bHQiLCJub3ciLCJ1cGRhdGVkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZGVsIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUEsSUFBSUMsYUFBYSxHQUFHRixRQUFRLENBQUNHLE1BQVQsQ0FBZ0I7QUFDaENDLEVBQUFBLFFBQVEsRUFBRTtBQUNOQyxJQUFBQSxJQUFJLEVBQUVDLE1BREE7QUFFTkMsSUFBQUEsUUFBUSxFQUFFO0FBRkosR0FEc0I7QUFLaENDLEVBQUFBLFNBQVMsRUFBRTtBQUNQSCxJQUFBQSxJQUFJLEVBQUVDLE1BREM7QUFFUEMsSUFBQUEsUUFBUSxFQUFFO0FBRkgsR0FMcUI7QUFTaENFLEVBQUFBLE9BQU8sRUFBRTtBQUNMSixJQUFBQSxJQUFJLEVBQUVDLE1BREQ7QUFFTEMsSUFBQUEsUUFBUSxFQUFFO0FBRkwsR0FUdUI7QUFhaENHLEVBQUFBLE9BQU8sRUFBRTtBQUNMTCxJQUFBQSxJQUFJLEVBQUVDLE1BREQ7QUFFTEMsSUFBQUEsUUFBUSxFQUFFO0FBRkwsR0FidUI7QUFpQmhDSSxFQUFBQSxJQUFJLEVBQUU7QUFDRk4sSUFBQUEsSUFBSSxFQUFFTyxJQURKO0FBRUZDLElBQUFBLE9BQU8sRUFBRUQsSUFBSSxDQUFDRTtBQUZaLEdBakIwQjtBQXFCaENDLEVBQUFBLE9BQU8sRUFBRTtBQUNQVixJQUFBQSxJQUFJLEVBQUVPO0FBREM7QUFyQnVCLENBQWhCLENBQXBCO0FBMEJBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixRQUFRLENBQUNrQixLQUFULENBQWUsU0FBZixFQUEwQmhCLGFBQTFCLENBQWpCIiwic291cmNlUm9vdCI6IkU6XFxOT0RFSlNcXFRyYWluaW5nXFxBY2Nlc3NtZW50VGVzdFxcc3JjXFxtb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5cclxubGV0IENvbW1lbnRTY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgdXNlck5hbWU6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgdXNlckVtYWlsOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGNvbW1lbnQ6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgIH0sIFxyXG4gICAgYmxvZ1VybDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGRhdGU6IHtcclxuICAgICAgICB0eXBlOiBEYXRlLFxyXG4gICAgICAgIGRlZmF1bHQ6IERhdGUubm93XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZDoge1xyXG4gICAgICB0eXBlOiBEYXRlXHJcbiAgICB9XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnY29tbWVudCcsIENvbW1lbnRTY2hlbWEpO1xyXG5cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "comment.model.js"
      ],
      "names": [
        "mongoose",
        "require",
        "CommentSchema",
        "Schema",
        "userName",
        "type",
        "String",
        "required",
        "userEmail",
        "comment",
        "blogUrl",
        "date",
        "Date",
        "default",
        "now",
        "updated",
        "module",
        "exports",
        "model"
      ],
      "mappings": ";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAgB;AAChCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GADsB;AAKhCC,EAAAA,SAAS,EAAE;AACPH,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GALqB;AAShCE,EAAAA,OAAO,EAAE;AACLJ,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GATuB;AAahCG,EAAAA,OAAO,EAAE;AACLL,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAbuB;AAiBhCI,EAAAA,IAAI,EAAE;AACFN,IAAAA,IAAI,EAAEO,IADJ;AAEFC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAFZ,GAjB0B;AAqBhCC,EAAAA,OAAO,EAAE;AACPV,IAAAA,IAAI,EAAEO;AADC;AArBuB,CAAhB,CAApB;AA0BAI,MAAM,CAACC,OAAP,GAAiBjB,QAAQ,CAACkB,KAAT,CAAe,SAAf,EAA0BhB,aAA1B,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\r\n\r\nlet CommentSchema = mongoose.Schema({\r\n    userName: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    userEmail: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    comment: {\r\n        type: String,\r\n        required: true\r\n    }, \r\n    blogUrl: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    date: {\r\n        type: Date,\r\n        default: Date.now\r\n    },\r\n    updated: {\r\n      type: Date\r\n    }\r\n});\r\n\r\nmodule.exports = mongoose.model('comment', CommentSchema);\r\n\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550843165097
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\routes\\\\like.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\like.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\like.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes\\like.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
        "sourceFileName": "like.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar LikeModel = require('../models/like.model');\n\nvar jwt = require('jsonwebtoken');\n\nvar config = require('../config');\n\nvar router = express.Router();\n\nvar logger = require(\"../logger\"); // like/dislike comment - POST API\n\n\nrouter.post('/comment/like_dislike', function (req, res) {\n  if (Object.keys(req.body).length === 0) {\n    return res.status(400).send('Request body is missing!');\n  }\n\n  var token = req.headers['x-access-token'] || req.headers['authorization'];\n\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n  if (token) {\n    jwt.verify(token, config.secret, function (err, decoded) {\n      if (err) {\n        return res.json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        var model = new LikeModel(req.body);\n        LikeModel.findOneAndUpdate({\n          commentId: model.commentId\n        }, req.body, {\n          new: true\n        }).then(function (doc) {\n          if (!doc || doc.length === 0) {\n            model.save().then(function (doc) {\n              if (!doc || doc.length === 0) {\n                return res.status(500).send(doc);\n              }\n\n              res.status(201).json({\n                status: true,\n                message: 'Successfully created.'\n              });\n            }).catch(function (err) {\n              res.status(500).json(err);\n            }); // return res.status(500).send(doc);\n          }\n\n          res.status(201).json({\n            status: true,\n            message: 'Successfully updated.'\n          });\n        }).catch(function (err) {\n          logger.log({\n            level: 'error',\n            message: err\n          });\n        });\n      }\n    });\n  } else {\n    return res.json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpa2UuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJMaWtlTW9kZWwiLCJqd3QiLCJjb25maWciLCJyb3V0ZXIiLCJSb3V0ZXIiLCJsb2dnZXIiLCJwb3N0IiwicmVxIiwicmVzIiwiT2JqZWN0Iiwia2V5cyIsImJvZHkiLCJsZW5ndGgiLCJzdGF0dXMiLCJzZW5kIiwidG9rZW4iLCJoZWFkZXJzIiwic3RhcnRzV2l0aCIsInNsaWNlIiwidmVyaWZ5Iiwic2VjcmV0IiwiZXJyIiwiZGVjb2RlZCIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsIm1vZGVsIiwiZmluZE9uZUFuZFVwZGF0ZSIsImNvbW1lbnRJZCIsIm5ldyIsInRoZW4iLCJkb2MiLCJzYXZlIiwiY2F0Y2giLCJsb2ciLCJsZXZlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFDQSxJQUFJQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxzQkFBRCxDQUF2Qjs7QUFDQSxJQUFJRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxjQUFELENBQWpCOztBQUNBLElBQU1HLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBdEI7O0FBQ0EsSUFBSUksTUFBTSxHQUFHTCxPQUFPLENBQUNNLE1BQVIsRUFBYjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQXBCLEMsQ0FFQTs7O0FBQ0FJLE1BQU0sQ0FBQ0csSUFBUCxDQUFZLHVCQUFaLEVBQXFDLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQy9DLE1BQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxHQUFHLENBQUNJLElBQWhCLEVBQXNCQyxNQUF0QixLQUFpQyxDQUFyQyxFQUF3QztBQUNwQyxXQUFPSixHQUFHLENBQUNLLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQiwwQkFBckIsQ0FBUDtBQUNIOztBQUNELE1BQUlDLEtBQUssR0FBR1IsR0FBRyxDQUFDUyxPQUFKLENBQVksZ0JBQVosS0FBaUNULEdBQUcsQ0FBQ1MsT0FBSixDQUFZLGVBQVosQ0FBN0M7O0FBQ0EsTUFBSUQsS0FBSyxDQUFDRSxVQUFOLENBQWlCLFNBQWpCLENBQUosRUFBaUM7QUFDN0I7QUFDQUYsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNHLEtBQU4sQ0FBWSxDQUFaLEVBQWVILEtBQUssQ0FBQ0gsTUFBckIsQ0FBUjtBQUNIOztBQUVELE1BQUlHLEtBQUosRUFBVztBQUNQZCxJQUFBQSxHQUFHLENBQUNrQixNQUFKLENBQVdKLEtBQVgsRUFBa0JiLE1BQU0sQ0FBQ2tCLE1BQXpCLEVBQWlDLFVBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFrQjtBQUMvQyxVQUFJRCxHQUFKLEVBQVM7QUFDTCxlQUFPYixHQUFHLENBQUNlLElBQUosQ0FBUztBQUNaQyxVQUFBQSxPQUFPLEVBQUUsS0FERztBQUVaQyxVQUFBQSxPQUFPLEVBQUU7QUFGRyxTQUFULENBQVA7QUFJSCxPQUxELE1BS087QUFDSCxZQUFJQyxLQUFLLEdBQUcsSUFBSTFCLFNBQUosQ0FBY08sR0FBRyxDQUFDSSxJQUFsQixDQUFaO0FBQ0FYLFFBQUFBLFNBQVMsQ0FBQzJCLGdCQUFWLENBQTJCO0FBQ3ZCQyxVQUFBQSxTQUFTLEVBQUVGLEtBQUssQ0FBQ0U7QUFETSxTQUEzQixFQUVHckIsR0FBRyxDQUFDSSxJQUZQLEVBRWE7QUFBRWtCLFVBQUFBLEdBQUcsRUFBRTtBQUFQLFNBRmIsRUFHS0MsSUFITCxDQUdVLFVBQUFDLEdBQUcsRUFBSTtBQUNULGNBQUksQ0FBQ0EsR0FBRCxJQUFRQSxHQUFHLENBQUNuQixNQUFKLEtBQWUsQ0FBM0IsRUFBOEI7QUFDMUJjLFlBQUFBLEtBQUssQ0FBQ00sSUFBTixHQUNLRixJQURMLENBQ1UsVUFBQUMsR0FBRyxFQUFJO0FBQ1Qsa0JBQUksQ0FBQ0EsR0FBRCxJQUFRQSxHQUFHLENBQUNuQixNQUFKLEtBQWUsQ0FBM0IsRUFBOEI7QUFDMUIsdUJBQU9KLEdBQUcsQ0FBQ0ssTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCaUIsR0FBckIsQ0FBUDtBQUNIOztBQUNEdkIsY0FBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVcsR0FBWCxFQUFnQlUsSUFBaEIsQ0FBcUI7QUFDakJWLGdCQUFBQSxNQUFNLEVBQUUsSUFEUztBQUVqQlksZ0JBQUFBLE9BQU8sRUFBRTtBQUZRLGVBQXJCO0FBSUgsYUFUTCxFQVVLUSxLQVZMLENBVVcsVUFBQVosR0FBRyxFQUFJO0FBQ1ZiLGNBQUFBLEdBQUcsQ0FBQ0ssTUFBSixDQUFXLEdBQVgsRUFBZ0JVLElBQWhCLENBQXFCRixHQUFyQjtBQUNILGFBWkwsRUFEMEIsQ0FjMUI7QUFDSDs7QUFDRGIsVUFBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVcsR0FBWCxFQUFnQlUsSUFBaEIsQ0FBcUI7QUFDakJWLFlBQUFBLE1BQU0sRUFBRSxJQURTO0FBRWpCWSxZQUFBQSxPQUFPLEVBQUU7QUFGUSxXQUFyQjtBQUlILFNBeEJMLEVBeUJLUSxLQXpCTCxDQXlCVyxVQUFBWixHQUFHLEVBQUk7QUFDVmhCLFVBQUFBLE1BQU0sQ0FBQzZCLEdBQVAsQ0FBVztBQUNQQyxZQUFBQSxLQUFLLEVBQUUsT0FEQTtBQUVQVixZQUFBQSxPQUFPLEVBQUVKO0FBRkYsV0FBWDtBQUlILFNBOUJMO0FBK0JIO0FBQ0osS0F4Q0Q7QUF5Q0gsR0ExQ0QsTUEwQ087QUFDSCxXQUFPYixHQUFHLENBQUNlLElBQUosQ0FBUztBQUNaQyxNQUFBQSxPQUFPLEVBQUUsS0FERztBQUVaQyxNQUFBQSxPQUFPLEVBQUU7QUFGRyxLQUFULENBQVA7QUFJSDtBQUNKLENBMUREO0FBNERBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQyxNQUFqQiIsInNvdXJjZVJvb3QiOiJFOlxcTk9ERUpTXFxUcmFpbmluZ1xcQWNjZXNzbWVudFRlc3RcXHNyY1xccm91dGVzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmxldCBMaWtlTW9kZWwgPSByZXF1aXJlKCcuLi9tb2RlbHMvbGlrZS5tb2RlbCcpO1xyXG5sZXQgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XHJcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xyXG5sZXQgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxubGV0IGxvZ2dlciA9IHJlcXVpcmUoXCIuLi9sb2dnZXJcIik7XHJcblxyXG4vLyBsaWtlL2Rpc2xpa2UgY29tbWVudCAtIFBPU1QgQVBJXHJcbnJvdXRlci5wb3N0KCcvY29tbWVudC9saWtlX2Rpc2xpa2UnLCAocmVxLCByZXMpID0+IHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhyZXEuYm9keSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5zZW5kKCdSZXF1ZXN0IGJvZHkgaXMgbWlzc2luZyEnKTtcclxuICAgIH1cclxuICAgIGxldCB0b2tlbiA9IHJlcS5oZWFkZXJzWyd4LWFjY2Vzcy10b2tlbiddIHx8IHJlcS5oZWFkZXJzWydhdXRob3JpemF0aW9uJ107XHJcbiAgICBpZiAodG9rZW4uc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIEJlYXJlciBmcm9tIHN0cmluZ1xyXG4gICAgICAgIHRva2VuID0gdG9rZW4uc2xpY2UoNywgdG9rZW4ubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICBqd3QudmVyaWZ5KHRva2VuLCBjb25maWcuc2VjcmV0LCAoZXJyLCBkZWNvZGVkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Rva2VuIGlzIG5vdCB2YWxpZCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vZGVsID0gbmV3IExpa2VNb2RlbChyZXEuYm9keSk7XHJcbiAgICAgICAgICAgICAgICBMaWtlTW9kZWwuZmluZE9uZUFuZFVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudElkOiBtb2RlbC5jb21tZW50SWRcclxuICAgICAgICAgICAgICAgIH0sIHJlcS5ib2R5LCB7IG5ldzogdHJ1ZSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGRvYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZG9jIHx8IGRvYy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRvYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZG9jIHx8IGRvYy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuc2VuZChkb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzZnVsbHkgY3JlYXRlZC4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5zZW5kKGRvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSB1cGRhdGVkLicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHtcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoIHRva2VuIGlzIG5vdCBzdXBwbGllZCdcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "like.js"
      ],
      "names": [
        "express",
        "require",
        "LikeModel",
        "jwt",
        "config",
        "router",
        "Router",
        "logger",
        "post",
        "req",
        "res",
        "Object",
        "keys",
        "body",
        "length",
        "status",
        "send",
        "token",
        "headers",
        "startsWith",
        "slice",
        "verify",
        "secret",
        "err",
        "decoded",
        "json",
        "success",
        "message",
        "model",
        "findOneAndUpdate",
        "commentId",
        "new",
        "then",
        "doc",
        "save",
        "catch",
        "log",
        "level",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAII,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAb;;AACA,IAAIC,MAAM,GAAGN,OAAO,CAAC,WAAD,CAApB,C,CAEA;;;AACAI,MAAM,CAACG,IAAP,CAAY,uBAAZ,EAAqC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/C,MAAIC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,IAAhB,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CAAP;AACH;;AACD,MAAIC,KAAK,GAAGR,GAAG,CAACS,OAAJ,CAAY,gBAAZ,KAAiCT,GAAG,CAACS,OAAJ,CAAY,eAAZ,CAA7C;;AACA,MAAID,KAAK,CAACE,UAAN,CAAiB,SAAjB,CAAJ,EAAiC;AAC7B;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACH,MAArB,CAAR;AACH;;AAED,MAAIG,KAAJ,EAAW;AACPd,IAAAA,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBb,MAAM,CAACkB,MAAzB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,UAAID,GAAJ,EAAS;AACL,eAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAT,CAAP;AAIH,OALD,MAKO;AACH,YAAIC,KAAK,GAAG,IAAI1B,SAAJ,CAAcO,GAAG,CAACI,IAAlB,CAAZ;AACAX,QAAAA,SAAS,CAAC2B,gBAAV,CAA2B;AACvBC,UAAAA,SAAS,EAAEF,KAAK,CAACE;AADM,SAA3B,EAEGrB,GAAG,CAACI,IAFP,EAEa;AAAEkB,UAAAA,GAAG,EAAE;AAAP,SAFb,EAGKC,IAHL,CAGU,UAAAC,GAAG,EAAI;AACT,cAAI,CAACA,GAAD,IAAQA,GAAG,CAACnB,MAAJ,KAAe,CAA3B,EAA8B;AAC1Bc,YAAAA,KAAK,CAACM,IAAN,GACKF,IADL,CACU,UAAAC,GAAG,EAAI;AACT,kBAAI,CAACA,GAAD,IAAQA,GAAG,CAACnB,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,uBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiB,GAArB,CAAP;AACH;;AACDvB,cAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,gBAAAA,MAAM,EAAE,IADS;AAEjBY,gBAAAA,OAAO,EAAE;AAFQ,eAArB;AAIH,aATL,EAUKQ,KAVL,CAUW,UAAAZ,GAAG,EAAI;AACVb,cAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqBF,GAArB;AACH,aAZL,EAD0B,CAc1B;AACH;;AACDb,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBV,YAAAA,MAAM,EAAE,IADS;AAEjBY,YAAAA,OAAO,EAAE;AAFQ,WAArB;AAIH,SAxBL,EAyBKQ,KAzBL,CAyBW,UAAAZ,GAAG,EAAI;AACVhB,UAAAA,MAAM,CAAC6B,GAAP,CAAW;AACPC,YAAAA,KAAK,EAAE,OADA;AAEPV,YAAAA,OAAO,EAAEJ;AAFF,WAAX;AAIH,SA9BL;AA+BH;AACJ,KAxCD;AAyCH,GA1CD,MA0CO;AACH,WAAOb,GAAG,CAACe,IAAJ,CAAS;AACZC,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAT,CAAP;AAIH;AACJ,CA1DD;AA4DAW,MAAM,CAACC,OAAP,GAAiBlC,MAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\routes",
      "sourcesContent": [
        "let express = require('express');\r\nlet LikeModel = require('../models/like.model');\r\nlet jwt = require('jsonwebtoken');\r\nconst config = require('../config');\r\nlet router = express.Router();\r\nlet logger = require(\"../logger\");\r\n\r\n// like/dislike comment - POST API\r\nrouter.post('/comment/like_dislike', (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        return res.status(400).send('Request body is missing!');\r\n    }\r\n    let token = req.headers['x-access-token'] || req.headers['authorization'];\r\n    if (token.startsWith('Bearer ')) {\r\n        // Remove Bearer from string\r\n        token = token.slice(7, token.length);\r\n    }\r\n\r\n    if (token) {\r\n        jwt.verify(token, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                return res.json({\r\n                    success: false,\r\n                    message: 'Token is not valid'\r\n                });\r\n            } else {\r\n                let model = new LikeModel(req.body);\r\n                LikeModel.findOneAndUpdate({\r\n                    commentId: model.commentId\r\n                }, req.body, { new: true })\r\n                    .then(doc => {\r\n                        if (!doc || doc.length === 0) {\r\n                            model.save()\r\n                                .then(doc => {\r\n                                    if (!doc || doc.length === 0) {\r\n                                        return res.status(500).send(doc);\r\n                                    }\r\n                                    res.status(201).json({\r\n                                        status: true,\r\n                                        message: 'Successfully created.',\r\n                                    });\r\n                                })\r\n                                .catch(err => {\r\n                                    res.status(500).json(err);\r\n                                });\r\n                            // return res.status(500).send(doc);\r\n                        }\r\n                        res.status(201).json({\r\n                            status: true,\r\n                            message: 'Successfully updated.',\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        logger.log({\r\n                            level: 'error',\r\n                            message: err\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    } else {\r\n        return res.json({\r\n            success: false,\r\n            message: 'Auth token is not supplied'\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "script",
    "mtime": 1551187599387
  },
  "{\"sourceRoot\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"filename\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\\\\src\\\\models\\\\like.model.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\NODEJS\\\\Training\\\\AccessmentTest\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.3.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\NODEJS\\Training\\AccessmentTest",
      "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\like.model.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\NODEJS\\Training\\AccessmentTest",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\like.model.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models\\like.model.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
        "sourceFileName": "like.model.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar mongoose = require('mongoose');\n\nvar LikeSchema = mongoose.Schema({\n  commentId: {\n    type: String,\n    required: true\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  },\n  updated: {\n    type: Date\n  },\n  flag: {\n    type: Boolean,\n    required: true\n  }\n});\nmodule.exports = mongoose.model('likes', LikeSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpa2UubW9kZWwuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiTGlrZVNjaGVtYSIsIlNjaGVtYSIsImNvbW1lbnRJZCIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImRhdGUiLCJEYXRlIiwiZGVmYXVsdCIsIm5vdyIsInVwZGF0ZWQiLCJmbGFnIiwiQm9vbGVhbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsUUFBUSxDQUFDRyxNQUFULENBQWdCO0FBQzdCQyxFQUFBQSxTQUFTLEVBQUU7QUFDUEMsSUFBQUEsSUFBSSxFQUFFQyxNQURDO0FBRVBDLElBQUFBLFFBQVEsRUFBRTtBQUZILEdBRGtCO0FBSzdCQyxFQUFBQSxJQUFJLEVBQUU7QUFDRkgsSUFBQUEsSUFBSSxFQUFFSSxJQURKO0FBRUZDLElBQUFBLE9BQU8sRUFBRUQsSUFBSSxDQUFDRTtBQUZaLEdBTHVCO0FBUzdCQyxFQUFBQSxPQUFPLEVBQUU7QUFDTFAsSUFBQUEsSUFBSSxFQUFFSTtBQURELEdBVG9CO0FBWTdCSSxFQUFBQSxJQUFJLEVBQUU7QUFDRlIsSUFBQUEsSUFBSSxFQUFFUyxPQURKO0FBRUZQLElBQUFBLFFBQVEsRUFBRTtBQUZSO0FBWnVCLENBQWhCLENBQWpCO0FBa0JBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQixRQUFRLENBQUNpQixLQUFULENBQWUsT0FBZixFQUF3QmYsVUFBeEIsQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXE5PREVKU1xcVHJhaW5pbmdcXEFjY2Vzc21lbnRUZXN0XFxzcmNcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImxldCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcblxyXG5sZXQgTGlrZVNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBjb21tZW50SWQ6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgIH0sXHJcbiAgICBkYXRlOiB7XHJcbiAgICAgICAgdHlwZTogRGF0ZSxcclxuICAgICAgICBkZWZhdWx0OiBEYXRlLm5vd1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQ6IHtcclxuICAgICAgICB0eXBlOiBEYXRlXHJcbiAgICB9LFxyXG4gICAgZmxhZzoge1xyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgIH1cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdsaWtlcycsIExpa2VTY2hlbWEpO1xyXG5cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "like.model.js"
      ],
      "names": [
        "mongoose",
        "require",
        "LikeSchema",
        "Schema",
        "commentId",
        "type",
        "String",
        "required",
        "date",
        "Date",
        "default",
        "now",
        "updated",
        "flag",
        "Boolean",
        "module",
        "exports",
        "model"
      ],
      "mappings": ";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,UAAU,GAAGF,QAAQ,CAACG,MAAT,CAAgB;AAC7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GADkB;AAK7BC,EAAAA,IAAI,EAAE;AACFH,IAAAA,IAAI,EAAEI,IADJ;AAEFC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAFZ,GALuB;AAS7BC,EAAAA,OAAO,EAAE;AACLP,IAAAA,IAAI,EAAEI;AADD,GAToB;AAY7BI,EAAAA,IAAI,EAAE;AACFR,IAAAA,IAAI,EAAES,OADJ;AAEFP,IAAAA,QAAQ,EAAE;AAFR;AAZuB,CAAhB,CAAjB;AAkBAQ,MAAM,CAACC,OAAP,GAAiBhB,QAAQ,CAACiB,KAAT,CAAe,OAAf,EAAwBf,UAAxB,CAAjB",
      "sourceRoot": "E:\\NODEJS\\Training\\AccessmentTest\\src\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\r\n\r\nlet LikeSchema = mongoose.Schema({\r\n    commentId: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    date: {\r\n        type: Date,\r\n        default: Date.now\r\n    },\r\n    updated: {\r\n        type: Date\r\n    },\r\n    flag: {\r\n        type: Boolean,\r\n        required: true\r\n    }\r\n});\r\n\r\nmodule.exports = mongoose.model('likes', LikeSchema);\r\n\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1551184101125
  }
}